(function(e){function a(a){for(var t,i,n=a[0],u=a[1],c=a[2],d=0,m=[];d<n.length;d++)i=n[d],s[i]&&m.push(s[i][0]),s[i]=0;for(t in u)Object.prototype.hasOwnProperty.call(u,t)&&(e[t]=u[t]);l&&l(a);while(m.length)m.shift()();return r.push.apply(r,c||[]),o()}function o(){for(var e,a=0;a<r.length;a++){for(var o=r[a],t=!0,n=1;n<o.length;n++){var u=o[n];0!==s[u]&&(t=!1)}t&&(r.splice(a--,1),e=i(i.s=o[0]))}return e}var t={},s={app:0},r=[];function i(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,a,o){i.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:o})},i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,a){if(1&a&&(e=i(e)),8&a)return e;if(4&a&&"object"===typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var t in e)i.d(o,t,function(a){return e[a]}.bind(null,t));return o},i.n=function(e){var a=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(a,"a",a),a},i.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},i.p="/";var n=window["webpackJsonp"]=window["webpackJsonp"]||[],u=n.push.bind(n);n.push=a,n=n.slice();for(var c=0;c<n.length;c++)a(n[c]);var l=u;r.push([0,"chunk-vendors"]),o()})({0:function(e,a,o){e.exports=o("56d7")},"034f":function(e,a,o){"use strict";var t=o("64a9"),s=o.n(t);s.a},"0919":function(e,a,o){"use strict";var t=o("4a62"),s=o.n(t);s.a},"2aad":function(e,a,o){},"4a62":function(e,a,o){},"56d7":function(e,a,o){"use strict";o.r(a);o("cadf"),o("551c"),o("f751"),o("097d");var t=o("2b0e"),s=o("8c4f"),r=o("0284"),i=o.n(r),n=o("d36c"),u=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{attrs:{id:"app"}},[o("transition",{attrs:{name:"slide"}},[o("router-view")],1)],1)},c=[],l={name:"app"},d=l,m=(o("034f"),o("2877")),p=Object(m["a"])(d,u,c,!1,null,null,null),v=p.exports,_=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("span")},f=[],g={props:["entry"]},x=g,j=Object(m["a"])(x,_,f,!1,null,null,null),b=j.exports,h=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"card bg-light"},[o("div",{staticClass:"card-heading bg-primary text-light"},[o("b",[e._v(e._s(e.title))])]),o("div",{staticClass:"card-body"},[e._t("default")],2)])},y=[],q={props:["title"]},C=q,E=(o("ed52"),Object(m["a"])(C,h,y,!1,null,null,null)),P=E.exports,z=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("blockquote",{staticClass:"blockquote"},[o("p",{staticClass:"mb-0"},[e._t("default")],2),o("footer",{staticClass:"blockquote-footer"},[e._v(e._s(e.author)+" "),o("cite",{directives:[{name:"title",rawName:"v-title",value:e.work,expression:"work"}]},[e._v(e._s(e.work))])])])},w=[],L={props:["author","work"],directives:{title:{}}},R=L,A=Object(m["a"])(R,z,w,!1,null,null,null),k=A.exports,S=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",[o("BigHeader"),o("HomeContent"),o("BigFooter")],1)},O=[],$=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"jumbotron jumbotron-fluid bg-secondary text-light"},[o("div",{staticClass:"container"},[o("h4",[e._v("O autor")]),o("p",{staticClass:"lead"},[e._v("Plínio Balduino ")]),o("p",[e._v("Plínio Balduino desenvolve softwares para diversas plataformas há quase vinte anos, tenta tocar baixo decentemente há dez, é casado com Roberta e pai de Gustavo, Mariana e Duda. É autor do livro Dominando JavaScript com jQuery, publicado pela Editora Casa do Código.")]),o("p",[e._v("É também mantenedor dos sites ClojureDocs BR, e Clojure Brasil, além de ser um dos organizadores do (clj-sp), o grupo de usuários Clojure de São Paulo e Rio de Janeiro, administrador da lista de discussão ClojureBrasil e membro ativo da lista oficial do Clojure e da lista Clojure Portugal.")]),o("p",[e._v("No último capítulo há uma lista com os links dos sites citados aqui e mais alguns muito interessantes para o desenvolvedor Clojure.")]),o("hr"),o("h5",[e._v("Licenças e direitos autorais")]),e._m(0),e._m(1),e._m(2),o("Version")],1)])},T=[function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("p",[o("small",[e._v("Os direitos autorais deste site e de seu conteúdo pertencem a Plínio Balduino, exceto onde seja informado o contrário. Você pode compartilhar, copiar e citar o conteúdo aqui presente, desde que informando a fonte. Você não pode utilizar o conteúdo aqui presente como se fosse o autor. Ao utilizar este site e seu conteúdo, você está automaticamente concordando com estes termos.")])])},function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("p",[o("small",[e._v("Os direitos autorais do Clojure, o nome Clojure e qualquer recurso relacionado pertencem a Rich Hickey e/ou seus respectivos autores, exceto onde informado o contrário.")])])},function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("p",[o("small",[e._v("Os direitos autorais sobre o logotipo do Clojure pertencem a Tom Hickey.")])])}],N=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{attrs:{id:"version"}},[o("small",[e._v("Versão: "+e._s(e.GitHash))])])},V=[],J=o("8f96"),D={name:"Version",data:function(){return{GitHash:J}}},B=D,I=Object(m["a"])(B,N,V,!1,null,null,null),M=I.exports,F={name:"BigFooter",components:{Version:M}},H=F,U=Object(m["a"])(H,$,T,!1,null,null,null),X=U.exports,G=function(){var e=this,a=e.$createElement;e._self._c;return e._m(0)},Q=[function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"jumbotron jumbotron-fluid bg-primary text-light"},[o("div",{staticClass:"container"},[o("h1",{staticClass:"display-4"},[o("img",{staticClass:"d-none d-md-inline",attrs:{src:"https://clojure.org/images/clojure-logo-120b.png"}}),e._v("\n      Descobrindo Clojure\n    ")]),o("h2",[e._v("Programação funcional descomplicada para a JVM")])])])}],K={name:"BigHeader"},W=K,Z=Object(m["a"])(W,G,Q,!1,null,null,null),Y=Z.exports,ee=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"container"},[e._m(0),o("div",{staticClass:"row"},[o("ToC"),e._m(1)],1)])},ae=[function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"row"},[o("div",{staticClass:"col-sm text-clojure-dark-blue"},[o("p",{staticClass:"text-justify"},[e._v("\n        Você sempre quis aprender Clojure mas, por qualquer motivo, prefere um material em Português? E se, além de estar no seu idioma preferido, ele ainda for tão bom quanto os melhores livros em Inglês e o mais completo em Português?\n      ")]),o("p",{staticClass:"text-justify"},[e._v("\n        Seria excelente, não?\n      ")]),o("p",{staticClass:"text-justify"},[e._v("\n        Depois de mais tempo do que eu gostaria, estou disponibilizando o conteúdo do meu livro gratuitamente e online para que você possa entender, aprender e se tornar um programador Clojure. Ou simplesmente se tornar um melhor programador em qualquer linguagem que você prefira usar, apenas por ter aprendido práticas de programação funcional.\n      ")]),o("p",{staticClass:"text-justify"},[e._v("\n        Caso você prefira ler no conforto do seu leitor de e-books, em breve vou disponibilizar o conteúdo neste formato. Ou, caso você prefira o bom e velho livro em papel, também em breve você poderá adquirí-lo através da Amazon.\n      ")])])])},function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"col-sm-3 text-clojure-dark-blue"},[o("h3",[e._v("Quero o livro")]),o("p",[o("img",{staticClass:"img-fluid img-cover",attrs:{src:"img/cover.png"}})]),o("p",[e._v("\n        Quer comprar ou baixar? Aguarde.\n        ")])])}],oe=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"col-sm mr-1 text-clojure-dark-blue",attrs:{id:"index"}},[o("a",{attrs:{name:"toc"}}),o("h3",[e._v("Quero ler online")]),o("ul",[o("li",[o("router-link",{attrs:{to:"/online"}},[e._v("Sobre a versão online")])],1),o("li",[e._v("Introdução")]),o("ul",[o("li",[o("router-link",{attrs:{to:"/dedication"}},[e._v("Dedicatória")])],1),o("li",[o("router-link",{attrs:{to:"/foreword"}},[e._v("Prefácio")])],1),o("li",[o("router-link",{attrs:{to:"/thanks"}},[e._v("Agradecimentos")])],1),o("li",[o("router-link",{attrs:{to:"/author"}},[e._v("Sobre o autor")])],1),o("li",[o("router-link",{attrs:{to:"/warning"}},[e._v("Aviso")])],1)])]),o("ol",[o("li",[o("router-link",{attrs:{to:"/presentation"}},[e._v("Apresentação")])],1),e._m(0),o("li",[o("router-link",{attrs:{to:"/gentleintro"}},[e._v("Uma introdução gentil ao Clojure")])],1),e._m(1),o("li",[o("router-link",{attrs:{to:"/repl"}},[e._v("O REPL é tão importante...")])],1),e._m(2),o("li",[e._v("Descobrindo o poder das funções")]),o("li",[e._v("Dados e metadados")]),o("li",[e._v("Namespaces para organizar o código")]),o("li",[e._v("Calculando o infinito com lazy sequences")]),o("li",[e._v("Integrando Clojure com Java")]),o("li",[e._v("Concorrência e multithreading")]),o("li",[e._v("Estendendo a linguagem com macros")]),o("li",[e._v("Dicas para um bom desenvolvimento em Clojure")]),o("li",[e._v("Onde aprender mais")])]),e._v("\nE vem muito mais por aí\n")])},te=[function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ul",[o("li",[e._v("Por que Clojure?")]),o("li",[e._v("Para quem é esse livro")]),o("li",[e._v("Como o livro está organizado")]),o("li",[e._v("Lista de discussão e código fonte")])])},function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ul",[o("li",[e._v("O que é Clojure?")]),o("li",[e._v("Configurando o ambiente")]),o("li",[e._v("Explicando a sintaxe")]),o("li",[e._v("Explicando os parênteses")])])},function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ul",[o("li",[e._v("...que merece um capítulo a parte")]),o("li",[e._v("Alguns truques rápidos com o REPL")]),o("li",[e._v("Desenvolvimento baseado no REPL")]),o("li",[e._v("Criando uma aplicação de exemplo")]),o("li",[e._v("Modificando a aplicação através do REPL")])])}],se={name:"ToC"},re=se,ie=(o("0919"),Object(m["a"])(re,oe,te,!1,null,null,null)),ne=ie.exports,ue={name:"HomeContent",components:{ToC:ne}},ce=ue,le=Object(m["a"])(ce,ee,ae,!1,null,null,null),de=le.exports,me={name:"Home",components:{BigFooter:X,BigHeader:Y,HomeContent:de}},pe=me,ve=Object(m["a"])(pe,S,O,!1,null,null,null),_e=ve.exports,fe=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("img",{directives:[{name:"src",rawName:"v-src",value:e.src,expression:"src"},{name:"alt",rawName:"v-alt",value:e.description,expression:"description"}]})},ge=[],xe={props:["src","description","width","label"]},je=xe,be=Object(m["a"])(je,fe,ge,!1,null,null,null),he=be.exports,ye=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("span")},qe=[],Ce={props:["entry"]},Ee=Ce,Pe=Object(m["a"])(Ee,ye,qe,!1,null,null,null),ze=Pe.exports,we=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("span")},Le=[],Re={props:["entry"]},Ae=Re,ke=Object(m["a"])(Ae,we,Le,!1,null,null,null),Se=ke.exports,Oe=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",[o("LittleHeader"),o("div",{staticClass:"container"},[o("div",{staticClass:"row"},[o("div",{staticClass:"col-sm text-clojure-dark-blue"},[e._t("default")],2)])]),o("LittleFooter")],1)},$e=[],Te=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"jumbotron jumbotron-fluid bg-secondary text-light"},[o("div",{staticClass:"container"},[e._m(0),e._m(1),e._m(2),o("Version")],1)])},Ne=[function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("p",{staticClass:"text-justify"},[o("small",[e._v("Os direitos autorais deste site e de seu conteúdo pertencem a Plínio Balduino, exceto onde seja informado o contrário. Você pode compartilhar, copiar e citar o conteúdo aqui presente, desde que informando a fonte. Você não pode utilizar o conteúdo aqui presente como se fosse o autor. Ao utilizar este site e seu conteúdo, você está automaticamente concordando com estes termos.")])])},function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("p",{staticClass:"text-justify"},[o("small",[e._v("Os direitos autorais do Clojure, o nome Clojure e qualquer recurso relacionado pertencem a Rich Hickey e/ou seus respectivos autores, exceto onde informado o contrário.")])])},function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("p",{staticClass:"text-justify"},[o("small",[e._v("Os direitos autorais sobre o logotipo do Clojure pertencem a Tom Hickey.")])])}],Ve={name:"LittleFooter",components:{Version:M}},Je=Ve,De=Object(m["a"])(Je,Te,Ne,!1,null,null,null),Be=De.exports,Ie=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{staticClass:"jumbotron jumbotron-fluid bg-primary text-light"},[o("div",{staticClass:"container"},[o("h1",{staticClass:"display-4 text-light"},[o("router-link",{attrs:{to:"/"}},[o("img",{staticClass:"d-none d-md-inline",attrs:{src:"https://clojure.org/images/clojure-logo-120b.png"}}),e._v("\n        Descobrindo Clojure\n      ")])],1)])])},Me=[],Fe={name:"LittleHeader"},He=Fe,Ue=Object(m["a"])(He,Ie,Me,!1,null,null,null),Xe=Ue.exports,Ge={components:{LittleHeader:Xe,LittleFooter:Be}},Qe=Ge,Ke=Object(m["a"])(Qe,Oe,$e,!1,null,null,null),We=Ke.exports,Ze=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("NotFound")],1)},Ye=[],ea=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("pre",[e._v("user=> ("+e._s(e.$route.params.chapter)+"/read)\nSyntax error compiling at (REPL:1:1).\nNo such namespace: "+e._s(e.$route.params.chapter)+"\n\n; 404 - A página que você procura não existe ou mudou de lugar\n; "),o("router-link",{attrs:{to:"/"}},[e._v("Clique aqui")]),e._v(" para voltar à página inicial")],1)},aa=[],oa={name:"NotFound"},ta=oa,sa=Object(m["a"])(ta,ea,aa,!1,null,null,null),ra=sa.exports,ia={name:"Reader",components:{NotFound:ra}},na=ia,ua=Object(m["a"])(na,Ze,Ye,!1,null,null,null),ca=ua.exports,la=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("div",{directives:[{name:"highlight",rawName:"v-highlight"}]},[o("pre",{staticClass:"language-clojure"},[o("code",[e._t("default")],2)])])},da=[],ma={props:["language"],directives:{class:{}},created:function(){}},pa=ma,va=(o("d140"),Object(m["a"])(pa,la,da,!1,null,null,null)),_a=va.exports,fa=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("div",{staticClass:"col-sm text-clojure-dark-blue"},[o("h1",[e._v("Sobre o autor")]),o("p",{staticClass:"text-justify"},[e._v("Plínio Balduino desenvolve softwares para diversas plataformas há quase vinte anos, tenta tocar baixo decentemente há cinco, é casado com a Roberta e pai de Gustavo, Mariana e Duda. É autor do livro "),o("i",[e._v("Dominando JavaScript com jQuery")]),o("bib",{attrs:{index:"dominando-js"}}),e._v(", publicado pela Editora Casa do Código.")],1),o("p",{staticClass:"text-justify"},[e._v("É também mantenedor dos sites ClojureDocs BR, e Clojure Brasil, além de ser um dos organizadores do (clj-sp), o grupo de usuários Clojure de São Paulo e Rio de Janeiro, administrador da lista de discussão ClojureBrasil e membro ativo da lista oficial do Clojure e da lista Clojure Portugal.")]),o("p",{staticClass:"text-justify"},[e._v("No último capítulo há uma lista com os links dos sites citados aqui e mais alguns muito interessantes para o desenvolvedor Clojure.")]),o("img",{staticClass:"img-fluid img-cover",attrs:{src:"./img/autor.jpg",alt:"Autor falando sobre Clojure na QCon SP 2013"}})])])},ga=[],xa={name:"Author"},ja=xa,ba=Object(m["a"])(ja,fa,ga,!1,null,null,null),ha=ba.exports,ya=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("div",{staticClass:"col-sm text-clojure-dark-blue"},[o("h1",[e._v("Dedicatória")]),o("chapter-quote",{attrs:{author:"Plínio Balduino"}},[e._v('\n        "Aos meus filhos: Gu, Duda e Mari.'),o("br"),e._v('\n        Meu esforço é sempre por vocês."\n    ')])],1)])},qa=[],Ca={name:"Dedication"},Ea=Ca,Pa=Object(m["a"])(Ea,ya,qa,!1,null,null,null),za=Pa.exports,wa=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("h1",[e._v("Prefácio")]),o("p",{staticClass:"text-justify"},[e._v("\n  Plínio vem em boa hora trazer luz ao mundo LISP no Brasil. Ele queria\n  ter encontrado tamanha sutileza na introdução a Clojure como esta que\n  você tem em suas mãos. Confesso que eu também.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Tempos difíceis lá em 2009, quando os forasteiros da programação funcional\n  e do LISP na JVM contavam apenas com o site oficial da linguagem para\n  o aprendizado. E depois de muita, mas muita luta para aprender, aquele\n  mesmo site era tudo o que se tinha para tentar convencer chefes e colegas\n  de que Clojure era uma boa chave de fenda para a sua caixa de ferramentas.\n  Na verdade mesmo depois de anos estudando, escrevendo e evangelizando\n  Clojure, eu mesmo enfrentava dificuldade de mostrar às pessoas o quão\n  valorosa ela é.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Pois bem. Ao saber que Plínio, figura barbuda e conhecida na comunidade,\n  iria escrever sobre Clojure, muito me animei. Primeiro por que era um\n  livro brasileiro de Clojure, por si só isto é excepcional! Segundo por\n  que ele poderia facilmente repetir o sucesso de outras publicações suas.\n  E este cidadão me supera as expectativas com um conteúdo na quantidade,\n  profundidade e disposição que parece ter sido precisamente calculado para\n  capturar o seu e o meu cérebro com as mãos e colocá-los no mesmo patamar\n  de conhecimento a respeito da linguagem.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Aqui está o "),o("i",[e._v("baseline")]),e._v(", o "),o("i",[e._v("must have")]),e._v(", o "),o("i",[e._v("mindset")]),e._v(" Clojure.\n  Uma espécie de atmosfera que agora você pode circular tranquilamente.\n  É como se tudo começasse agora, muito mais claro e fluido. Esse Plínio\n  fez, sem tornar a comparação Clojure vs. Java a sua bandeira, o que com\n  muita frequencia só se consegue erguendo-a bem lá no alto: Ensinar\n  Clojure e trazer todos para um mesmo ponto de partida. E alcançar a\n  linha de chegada só depende de mim e de você, quando teremos Clojure\n  sendo usada no dia-a-dia de muitos projetos, da concepção à entrega.\n  ")]),o("p",{staticClass:"text-justify"},[o("i",[o("b",[e._v("Paulo Suzart")]),e._v(", Engineering Manager na Omio Berlin e pioneiro do Clojure no Brasil")]),e._v(".\n  ")])])},La=[],Ra={name:"Foreword"},Aa=Ra,ka=Object(m["a"])(Aa,wa,La,!1,null,null,null),Sa=ka.exports,Oa=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("h1",[e._v("2. Uma introdução gentil ao Clojure")]),o("bib",{attrs:{entry:"bio-marvin-minsky"}}),o("chapter-quote",{attrs:{author:"Marvin Minsky"}},[e._v('\n    "Qualquer pessoa pode aprender LISP em um dia, exceto os que aprenderam FORTRAN. Esses demorarão três dias."\n  ')]),o("h2",[e._v("2.1 O que é Clojure?")]),o("index",{attrs:{entry:"CLR"}}),o("index",{attrs:{entry:"JVM"}}),o("index",{attrs:{entry:"Hickey, Rich"}}),o("p",{staticClass:"text-justify"},[e._v("A linguagem Clojure foi criada por Rich Hickey e lançada em 2007, focando o desenvolvimento na JVM, mas hoje em dia é possível executar a linguagem sobre a CLR (a máquina virtual do .NET) e mesmo sobre alguma "),o("i",[e._v("engine")]),e._v(" JavaScript, como o V8, que é a base do "),o("i",[e._v("Node.js")]),e._v(".")]),o("index",{attrs:{entry:"concorrência"}}),o("index",{attrs:{entry:"multithreading"}}),o("index",{attrs:{entry:"programação funcional"}}),o("index",{attrs:{entry:"JavaScript"}}),o("index",{attrs:{entry:"Scala"}}),o("p",{staticClass:"text-justify"},[e._v("É uma linguagem funcional, como o JavaScript e o Scala, e foi pensada para facilitar o desenvolvimento de aplicações que dependam de concorrência de processos e "),o("i",[e._v("multithreading")]),o("bib",{attrs:{entry:"clojure-rationale"}}),e._v(", o que não significa que não possa ser usada para criar outras aplicações que não dependam disso. Sistemas concorrentes que podem ser bem difíceis de desenvolver com Java acabam se tornando mais simples e concisos.")],1),o("p",{staticClass:"text-justify"},[e._v("É também um dialeto LISP"),o("bib",{attrs:{entry:"history-lisp"}}),e._v(", mas com mudanças interessantes na forma de apresentar a linguagem, o que elimina uma porção de parênteses"),o("bib",{attrs:{entry:"lisp-differences"}}),e._v(" quando comparamos códigos equivalentes escritos em Common Lisp ou Scheme, que são os dois dialetos LISP historicamente mais conhecidos.")],1),o("h2",[e._v("2.2 Configurando o ambiente")]),o("p",{staticClass:"text-justify"},[e._v("No decorrer do livro, vamos escrever código o tempo todo e é importante que você já tenha o ambiente instalado antes mesmo de inserir sua primeira instrução.")]),o("p",{staticClass:"text-justify"},[e._v("A primeira coisa que precisamos nos certificar é que você tenha o JDK instalado em sua máquina. Ele pode ser baixado no seguinte link:")]),o("p",{staticClass:"text-justify"},[o("code",[e._v("http://www.oracle.com/technetwork/java/javase/downloads/index.html")])]),o("p",{staticClass:"text-justify"},[e._v("Verifique se a versão instalada do Java é a 1.8 ou mais recente. As versões mais recentes do Clojure não funcionam com versões mais antigas do Java.")]),o("p",{staticClass:"text-justify"},[e._v("Digite "),o("code",[e._v("java -version")]),e._v(" em seu Prompt de Comandos ou Terminal para verificar se você está com a máquina virtual instalada e qual sua respectiva versão.")]),o("p",{staticClass:"text-justify"},[e._v("Após termos o JDK funcionando, vamos instalar uma ferramenta chamada "),o("i",[e._v("Leiningen")]),e._v(", que vai ser nosso grande companheiro mesmo depois que você terminar o livro.")]),o("p",{staticClass:"text-justify"},[e._v("O "),o("i",[e._v("Leiningen")]),e._v(" automatiza uma série de tarefas, gerencia dependências, agiliza a execução de testes, compilação e pode ser estendido com o uso de plugins. Existem plugins para praticamente todas as tarefas comuns que você precise executar ao desenvolver com Clojure. Para quem está vindo do Java, podemos entender o Leiningen como um primo turbinado do "),o("i",[e._v("Maven")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Acesse http://leiningen.org/#install e leia as instruções para instalação do script. Em seguida, execute o comando "),o("code",[e._v("lein -v")]),e._v(" para verificar a versão atual e baixar as dependências que serão usadas inicialmente.")]),o("p",{staticClass:"text-justify"},[e._v("Durante a escrita desse livro, o Leiningen estava em sua versão "),o("code",[e._v("2.9.0")]),e._v(", mas não se preocupe se a sua versão for mais recente enquanto você estiver lendo o livro.")]),o("p",{staticClass:"text-justify"},[e._v("Execute "),o("code",[e._v("lein")]),e._v(" sem nenhum parâmetro para ver as opções de uso do Leiningen. Voltaremos a elas assim que explicarmos a sintaxe da linguagem.")]),o("h2",[e._v("2.3 Explicando a sintaxe")]),o("p",{staticClass:"text-justify"},[e._v("É bem provável que você se assuste na primeira vez que ver um código Clojure, mas fique tranquilo, pois existe uma lógica muito simples por trás dessa cara diferentona.")]),o("p",{staticClass:"text-justify"},[e._v("É comum pensar num primeiro momento que o Clojure é invertido em relação às outras linguagens por conta da ordem em que as expressões são escritas, mas você vai acabar percebendo que, na verdade, a linguagem é consistente até demais se olharmos em perspectiva.")]),o("p",{staticClass:"text-justify"},[e._v("Relembrando das aulas de matemática, nós expressamos funções dessa forma:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("y = f(x)")]),o("p",{staticClass:"text-justify"},[e._v("Para calcular o dobro, teríamos "),o("code",[e._v("y = f(x) = x * 2")]),e._v(", ou "),o("code",[e._v("y = x * 2")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Para calcularmos o dobro de um número, onde internamente calcularíamos o valor de um parâmetro "),o("code",[e._v("x")]),e._v(" multiplicado por "),o("i",[e._v("2")]),e._v(", teríamos:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("y = dobro(21)")]),o("index",{attrs:{entry:"notação prefixa"}}),o("index",{attrs:{entry:"operador"}}),o("index",{attrs:{entry:"index operando"}}),o("p",{staticClass:"text-justify"},[e._v("Note que estamos usando uma notação diferente: primeiro vem o "),o("i",[e._v("operador")]),o("code",[e._v("dobro")]),e._v(" e, em seguida, vem o "),o("i",[e._v("operando")]),e._v(", ou parâmetro, "),o("i",[e._v("21")]),e._v(". Chamamos isso de "),o("i",[e._v("notação prefixa")]),e._v(".")]),o("box",{attrs:{title:"Notação prefixa, ou simbólica"}},[o("p",{staticClass:"text-justify"},[e._v("A notação prefixa utilizada no Clojure, e em qualquer outro LISP, é conhecida também como "),o("i",[e._v("S-Expression")]),e._v(". Esse nome vem do termo "),o("i",[e._v("Symbolic Expression")]),e._v(", ou expressão simbólica, onde uma lista contendo outras listas pode ser representada internamente como uma árvore.")]),o("p",{staticClass:"text-justify"},[e._v("O termo foi utilizado pela primeira vez por John McCarthy, o criador do "),o("i",[e._v("LISP")]),o("bib",{attrs:{entry:"lisp-1"}}),e._v(". Antes das "),o("i",[e._v("S-Expressions")]),e._v(", McCarthy tinha trabalhado com a ideia de "),o("i",[e._v("M-Expressions")]),e._v(", ou "),o("i",[e._v("meta-expressions")]),e._v(", mas a ideia foi descartada"),o("bib",{attrs:{entry:"history-lisp"}}),e._v(".")],1)]),o("p",{staticClass:"text-justify"},[e._v("Já para executar um cálculo aritmético, usamos a forma abaixo:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("y = 21 * 2")]),o("index",{attrs:{entry:"notação infixa"}}),o("p",{staticClass:"text-justify"},[e._v("Primeiro temos um operando "),o("i",[e._v("21")]),e._v(", depois temos um operador responsável pela multiplicação e, finalmente, o segundo operando "),o("i",[e._v("2")]),e._v(". Chamamos essa forma de "),o("i",[e._v("notação infixa")]),e._v(".")]),o("box",{attrs:{title:"Se você veio do Ruby..."}},[o("index",{attrs:{entry:"Ruby"}}),o("p",{staticClass:"text-justify"},[e._v("Se você é um desenvolvedor Ruby, ignore esta última expressão.")]),o("p",{staticClass:"text-justify"},[e._v("No Ruby, o cálculo acima utiliza internamente a notação prefixa onde "),o("i",[e._v("21")]),e._v(" é um objeto, "),o("code",[e._v("*")]),e._v(" é um método (ou uma mensagem, se preferir) e "),o("i",[e._v("2")]),e._v(" é um parâmetro.")]),o("snippet",{attrs:{language:"ruby"}},[e._v("x = 21 * 2\n\ny = 21.*(2)")]),o("p",{staticClass:"text-justify"},[e._v("As duas formas são válidas e equivalentes, apesar da segunda ser mais difícil de ler.")])],1),o("p",{staticClass:"text-justify"},[e._v("A coisa fica bagunçada quando misturamos as duas formas:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("y = dobro(7 * 3)")]),o("p",{staticClass:"text-justify"},[e._v("Na expressão acima misturamos notação prefixa com infixa. Não há problema algum com isso, mas não é um bom exemplo de consistência.")]),o("p",{staticClass:"text-justify"},[e._v("Quando falamos em Clojure, ou qualquer outra forma de LISP, o primeiro item de uma lista é um operador e todos os demais são operandos.")]),o("index",{attrs:{entry:"função"}}),o("index",{attrs:{entry:"macros"}}),o("index",{attrs:{entry:"forma especial"}}),o("p",{staticClass:"text-justify"},[e._v("Todo operador é uma "),o("i",[e._v("função")]),e._v(", "),o("i",[e._v("macro")]),e._v(" ou "),o("i",[e._v("forma especial")]),e._v(", inclusive os operadores matemáticos. Não se preocupe em entender agora o que são macros ou formas especiais.")]),o("p",{staticClass:"text-justify"},[e._v("Todo os itens do resto da lista são considerados valores, parâmetros ou operandos.")]),o("p",{staticClass:"text-justify"},[e._v("Imagine agora que o símbolo + é uma função. Para calcularmos uma soma usaríamos o seguinte código:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("+(1, 2)")]),o("p",{staticClass:"text-justify"},[e._v("Movendo os parênteses e removendo as vírgulas, a nossa soma inicial ficaria:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("(+ 1 2)")]),o("box",{attrs:{title:"Molhando os dedos"}},[o("p",{staticClass:"text-justify"},[e._v("Vamos usar uma ferramenta muito importante do Clojure chamada REPL. Não se preocupe agora em saber o que significa, pois teremos um capítulo todo só para isso.")]),o("p",{staticClass:"text-justify"},[e._v("No Terminal do seu sistema operacional, execute o comando "),o("code",[e._v("lein repl")]),e._v(" para carregar o REPL do Clojure. Se for a primeira vez que você o abre, algumas dependências ainda serão baixadas para o seu computador.")]),o("p",{staticClass:"text-justify"},[e._v("Digite a instrução "),o("code",[e._v("(+ 1 2)")]),e._v(" e pressione ENTER. A linha de baixo trará o resultado, "),o("i",[e._v("3")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Parabéns, você acabou de escrever seu primeiro código em Clojure e nós ainda nem começamos a aprender a linguagem.")]),o("p",{staticClass:"text-justify"},[e._v("Use o REPL para acompanhar os exemplos desse livro enquanto for lendo, digitando e vendo os resultados conforme você aprende.")]),o("p",{staticClass:"text-justify"},[e._v("Quando quiser sair do REPL, digite "),o("code",[e._v("exit")]),e._v(" e pressione ENTER.")])]),o("p",{staticClass:"text-justify"},[e._v("Sabemos que "),o("code",[e._v("dobro")]),e._v(" também é uma função. Para calcular "),o("code",[e._v("dobro")]),e._v(", usaríamos:")]),o("snippet",{attrs:{language:"clojure"}},[e._v("(dobro 21)")]),o("p",{staticClass:"text-justify"},[e._v("Percebam que agora temos uma regra que se aplica a todos os casos. Repetindo a expressão acima que mistura as notações infixa e prefixa usando as regras do LISP, teríamos:")]),o("snippet",{attrs:{language:"clojure"}},[e._v("(dobro (* 7 3))")]),o("box",{attrs:{title:"Testando 'dobro'"}},[o("p",{staticClass:"text-justify"},[e._v("Para que possamos testar todos os exemplos desse capítulo, precisamos criar uma função chamada "),o("code",[e._v("dobro")]),e._v(", que recebe um parâmetro "),o("code",[e._v("x")]),e._v(" e devolve seu valor multiplicado por dois.")]),o("p",{staticClass:"text-justify"},[e._v("Em Clojure, criamos uma função "),o("code",[e._v("dobro")]),e._v(" da seguinte forma:")]),o("snippet",{attrs:{language:"clojure"}},[e._v("(defn dobro [x]\n  (* x 2))")]),o("p",{staticClass:"text-justify"},[e._v("Agora vamos abrir o REPL e digitar as linhas abaixo:")]),o("snippet",{attrs:{language:"clojure"}},[e._v("(dobro 21)\n\n(dobro (* 7 3))")]),o("p",{staticClass:"text-justify"},[e._v("Em ambos os casos, você obterá o número "),o("i",[e._v("42")]),e._v(" como resposta.")]),o("p",{staticClass:"text-justify"},[e._v("Ah, e comemore: você acabou de escrever sua primeira função em Clojure. As funções são parte importantíssima de uma linguagem funcional.")])],1),o("p",{staticClass:"text-justify"},[e._v("Talvez pela sua origem acadêmica e fortemente influenciada pela matemática, as implementações de LISP levam muito a sério a questão da consistência.")]),o("h2",[e._v("Explicando os parênteses")]),o("index",{attrs:{entry:"expressões numéricas"}}),o("p",{staticClass:"text-justify"},[e._v("Quando eu estava na quarta série, aprendi algo chamado de "),o("i",[e._v("expressão numérica")]),e._v(", que consiste em resolver um cálculo extenso atacando um pedaço por vez, organizadamente.")]),o("p",{staticClass:"text-justify"},[e._v("Cada pedaço desse cálculo fica dentro de parênteses, colchetes ou chaves, dependendo do quão aninhado esteja a expressão. Eu nunca mais vi esse tipo de hierarquia, mas sempre considerei como um jeito bacana de manter a organização.")]),o("p",{staticClass:"text-justify"},[e._v("Uma expressão numérica tem essa cara:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("x = {1 + [3 * (5 + 7)]}")]),o("p",{staticClass:"text-justify"},[e._v("Resolve a expressão de dentro para fora:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("x = {1 + [3 * (12)]}\n\nx = {1 + [36]}\n\nx = {37}\n\nx = 37")]),o("p",{staticClass:"text-justify"},[e._v("Simples, não?")]),o("p",{staticClass:"text-justify"},[e._v("Agora vamos extrapolar o que aprendemos na quarta série para uma linguagem de programação, trocando chaves e colchetes por parênteses:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("x = (1 + (3 * (5 + 7)))")]),o("p",{staticClass:"text-justify"},[e._v("Vamos substituir a nossa conhecida notação infixa pela prefixa:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("x = (+ 1 (* 3 (+ 5 7)))")]),o("p",{staticClass:"text-justify"},[e._v("Pronto. Você tem uma expressão numérica com a cara do LISP, resolvendo da forma como a professora ensinou lá na quarta série: primeiro você resolve os parênteses de dentro, depois os próximos, até terminar.")]),o("p",{staticClass:"text-justify"},[e._v("Pode parecer estranho, mas não se preocupe, com o tempo essa notação não te trará dificuldades na leitura e entendimento do código. E há sim mais razões pela qual ela é dessa maneira, que desvendaremos aos poucos.")]),o("p",{staticClass:"text-justify"},[e._v("Qualquer LISP que você encontrar pela frente, incluindo o Clojure, funciona exatamente dessa maneira.")]),o("index",{attrs:{entry:"precedência de operadores"}}),o("p",{staticClass:"text-justify"},[e._v("Uma vantagem que isso traz é que você não precisa ficar se preocupando com precedência de operadores. Imagine que você tem o código abaixo:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("x = 3 * 2 + 1\n\ny = 1 + 2 * 3")]),o("p",{staticClass:"text-justify"},[e._v("Os valores de "),o("code",[e._v("x")]),e._v(" e "),o("code",[e._v("y")]),e._v(" serão iguais? Sim, ambas as variáveis contém o número "),o("i",[e._v("7")]),e._v(", mas para saber disso você precisou ler em algum outro lugar que "),o("i",[e._v("o operador de multiplicação tem precedência sobre o operador de adição")]),e._v(". É algo que você espera que seja assim e age como se realmente fosse.")]),o("p",{staticClass:"text-justify"},[e._v("E o que aconteceria se você estiver usando uma linguagem em que a adição tem precedência sobre a multiplicação? Ou pior ainda: os operadores são executados da esquerda para a direita conforme forem aparecendo.")]),o("p",{staticClass:"text-justify"},[e._v("No primeiro caso, "),o("code",[e._v("x")]),e._v(" e "),o("code",[e._v("y")]),e._v(" continuariam sendo iguais, mas ambos teriam o valor "),o("i",[e._v("9")]),e._v(". No segundo caso, "),o("code",[e._v("x")]),e._v(" seria igual a "),o("i",[e._v("7")]),e._v(" e "),o("code",[e._v("y")]),e._v(" seria igual a "),o("i",[e._v("9")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Seria mais fácil se as expressões fossem escritas assim:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("x = (3 * 2) + 1\n\ny = 1 + (2 * 3)")]),o("p",{staticClass:"text-justify"},[e._v("Agora está claro para qualquer pessoa o que vai ser executado primeiro, independente do modo como a expressão seja interpretada pela linguagem. Pois saiba que é exatamente assim que um LISP trabalha. Usando a notação prefixa, as expressões acima ficariam da forma a seguir, que você pode testar usando o REPL:")]),o("snippet",{attrs:{language:"javascript"}},[e._v("(+ (* 3 2) 1)\n\n(+ 1 (* 3 2))")]),o("p",{staticClass:"text-justify"},[e._v("Primeiro será executada a multiplicação, que está nos parênteses mais internos e, em seguida, será executada a adição. Tudo isso sem se preocupar com regras ocultas ou peculiaridades do compilador.")]),o("p",{staticClass:"text-justify"},[e._v("No capítulo a seguir, vamos aprender mais sobre o REPL para que possamos utilizar Clojure de uma forma rápida e produtiva.")])],1)},$a=[],Ta={name:"GentleIntroduction"},Na=Ta,Va=Object(m["a"])(Na,Oa,$a,!1,null,null,null),Ja=Va.exports,Da=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("h1",[e._v("Sobre a versão online")]),o("h2",[e._v("Instruções")]),o("h2",[e._v("Prefácio da versão online")]),o("p",{staticClass:"text-justify"},[e._v("\n  Quando comecei a escrever este livro há alguns anos, havia uma total\n  falta de material em Português, com exceção de alguns posts em blogs\n  técnicos e algumas poucas palestras. O autor do prefácio, Paulo Suzart,\n  foi pioneiro ao escrever sobre Clojure e eu o acompanhei algum tempo depois.\n  Isso foi em 2008 e pouca coisa aconteceu nesse sentido desde então.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Hoje, felizmente, o cenário está um pouco melhor. Temos um livro publicado\n  em Português tratando da linguagem que satisfaz os iniciantes e os traz\n  para mais perto, sem que tenham que depender da documentação padrão da\n  linguagem, que é longe de ser amigável.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Por falha única e exclusivamente minha, por uma série de motivos alheios\n  a este foro, este acabou não sendo o tal livro pioneiro. De qualquer\n  maneira havia aqui conteúdo o bastante, já testado e amadurecido, e seria\n  um grande desperdício deixá-lo guardado. Estas últimas são, inclusive,\n  palavras dos revisores e dos primeiros leitores da obra, que tiveram\n  acesso a ela muito antes de qualquer publicação ser feita.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Finalmente, o resultado de tantos anos de trabalho e espera está sendo\n  disponibilizado a você, gratuitamente, gradualmente e online. Conforme\n  o último trecho for publicado, disponibilizarei também a opção de adquirir\n  a versão em papel. Seria uma forma de me ajudar e também de satisfazer\n  aqueles que preferem um livro físico para ler e fazer anotações. Estou\n  considerando a publicação em ebook também, mas talvez seja redundante.\n  Vamos ver como vai ser.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Desde já agradeço seu interesse, espero realmente que o conteúdo do livro\n  atenda às suas expectativas e necessidades e fique à vontade para oferecer\n  sua opinião, indicação de erros ou mesmo sugestões de melhoria.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Para sugestões ou correções, utilize o sistema de "),o("i",[e._v("issues")]),e._v(" em "),o("a",{attrs:{href:"https://github.com/pbalduino/descobrindoclojure"}},[e._v("https://github.com/pbalduino/descobrindoclojure")])]),o("p",{staticClass:"text-justify"},[e._v("\n  Aproveite.\n  ")])])},Ba=[],Ia={name:"OnlineVersion"},Ma=Ia,Fa=Object(m["a"])(Ma,Da,Ba,!1,null,null,null),Ha=Fa.exports,Ua=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("h1",[e._v("1. Apresentação")]),o("index",{attrs:{entry:"Whyte, David"}}),o("chapter-quote",{attrs:{author:"David Whyte, poeta"}},[e._v('\n  "Anything or anyone that does not bring you alive is too small for you"\n')]),o("h2",[e._v("1.1 Por que Clojure?")]),o("index",{attrs:{entry:"Raymond, Eric"}}),o("chapter-quote",{attrs:{author:"Eric Raymond em",work:"How to become a hacker"}},[e._v('\n"Vale a pena aprender LISP pela experiência de profunda iluminação que você terá quando finalmente o entender; essa experiência o tornará um programador melhor para o resto de sua vida, mesmo que você raramente use LISP."\n')]),o("p",{staticClass:"text-justify"},[o("i",[e._v('"Afinal, por que Clojure?"')])]),o("p",{staticClass:"text-justify"},[e._v("Talvez essa seja a pergunta que você se faça ao ver um livro sobre o assunto. Talvez seja a pergunta que você mais escute de chefes ou colegas de trabalho ao comentar sobre a linguagem.")]),o("p",{staticClass:"text-justify"},[e._v("Eu poderia dizer que Clojure é uma excelente ferramenta para que você trabalhe com processamento concorrente sem toda a complicação de ter que gerenciar "),o("i",[e._v("locks")]),e._v(" e "),o("i",[e._v("racing conditions")]),e._v(", além de oferecer nativamente formas de compartilhar estados entre "),o("i",[e._v("threads")]),e._v(" de acordo com a sua necessidade, mas nem toda aplicação que você desenvolver depende de "),o("i",[e._v("multithread")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Eu poderia demonstrar como a estratégia de "),o("i",[e._v("lazy evaluation")]),e._v(" permite que você processe quantidades absurdamente grandes de informação sem acabar com a memória da máquina e ainda assim retornar um resultado em um tempo aceitável, mas nem todo mundo tem quantidades absurdamente grandes de informação para trabalhar.")]),o("p",{staticClass:"text-justify"},[e._v("Poderia dizer também que Clojure é uma linguagem funcional, e a programação funcional naturalmente leva a códigos menores e mais simples, evitando boa parte da complexidade trazida pela orientação a objetos com a qual nos habituamos, mas a orientação a objetos é hoje um padrão de mercado e inúmeros problemas continuam sendo resolvidos assim.")]),o("p",{staticClass:"text-justify"},[e._v("Eu poderia também apontar que Clojure naturalmente faz com que você escreva funções menores e mais especializadas, aumentando o reuso de código e reduzindo a quantidade de bugs no sistema, mas utilizar boas práticas de programação também causam esse mesmo efeito com qualquer outra linguagem.")]),o("p",{staticClass:"text-justify"},[e._v("Eu posso argumentar que Clojure me ajudou a ver o perigo da mutabilidade espalhada por um sistema, e como isso me tornou um programador melhor e mais cuidadoso em Java ou em qualquer outra linguagem que eu use no dia a dia, limitando as partes móveis onde for realmente necessário e fazendo meu código ficar "),o("i",[e._v("thread-safe")]),o("bib",{attrs:{entry:"java-threads"}}),e._v(" sem perder legibilidade ou produtividade.")],1),o("p",{staticClass:"text-justify"},[e._v("Eu poderia dizer que Clojure tem um elegante sistema de macros, que permite que você adicione construções à linguagem que podem tornar seu código muito mais expressivo e elegante, ou mesmo criar DSLs conforme a sua necessidade sem ter que criar compiladores para isso, mas linguagens líderes de mercado não têm esse recurso e nosso trabalho continua sendo entregue com elas.")]),o("p",{staticClass:"text-justify"},[e._v("Posso demonstrar para o meu chefe que um sistema pode ser desenvolvido em um tempo menor, com menos bugs e ainda assim o código continua compreensível para qualquer colega novo que tiver que dar manutenção nele.")]),o("p",{staticClass:"text-justify"},[e._v("Eu posso também mostrar que você não precisa reinventar a roda, desenvolvendo novamente bibliotecas que já foram testadas e aprovadas, mas sim aproveitar de forma transparente todo o ecossistema já existente hoje que torna a plataforma Java tão poderosa e abrangente e, sem esforço, ainda pode aproveitar todo o poder e maturidade da JVM.")]),o("p",{staticClass:"text-justify"},[e._v("Mas, além de todas essas vantagens, eu vou dizer a você que Clojure é uma linguagem que além de divertida e expressiva, aumenta consideravelmente seu arsenal de técnicas para resolver problemas, mesmo que no dia a dia você acabe utilizando qualquer outra linguagem.")]),o("h2",[e._v("1.2 Para quem é esse livro")]),o("p",{staticClass:"text-justify"},[e._v("Este livro foi escrito para quem que já tem alguma experiência com desenvolvimento de software e compreende conceitos básicos como operadores lógicos, desvios condicionais, estruturação de código em funções, módulos e classes.")]),o("p",{staticClass:"text-justify"},[e._v("Vai ajudar bastante se você já estiver familiarizado com a máquina virtual do Java, mas é possível acompanhar o livro inteiro sem nunca ter escrito uma linha de código em Java ou qualquer outra linguagem para a JVM.")]),o("p",{staticClass:"text-justify"},[e._v("Finalmente, não é necessário qualquer conhecimento prévio de LISP, Clojure ou fundamentos de programação funcional. O propósito deste livro é justamente te guiar através desses conceitos sem cair nas armadilhas do jargão acadêmico.")]),o("h2",[e._v("1.3 Como o livro está organizado")]),o("p",{staticClass:"text-justify"},[e._v("No mercado de livros técnicos, existem duas formas muito comuns:")]),o("p",{staticClass:"text-justify"},[e._v('A primeira consiste em pegar a documentação da linguagem ou da ferramenta e ir explicando item a item. Com isso temos aqueles livros gigantescos intitulados "bíblias", que faziam muito sentido antes da popularização da Internet. Hoje em dia qualquer um pode entrar no seu site de busca preferido e alcançar qualquer informação que precisar, sem precisar gastar dinheiro com um livro.')]),o("p",{staticClass:"text-justify"},[e._v("A segunda forma são os "),o("i",[e._v("cookbooks")]),e._v(", livros com receitas para resolver problemas do dia-a-dia. São livros muito interessantes para quem já conhece a ferramenta, mas não são acessíveis para quem está começando porque focam em resolver problemas reais e deixam de lado as informações básicas, criando dúvidas para quem ainda não tem a base necessária.")]),o("p",{staticClass:"text-justify"},[e._v("Eu particularmente gosto muito desse tipo de livro depois que já me familiarizei com os conceitos e características da linguagem ou ferramenta.")]),o("p",{staticClass:"text-justify"},[e._v("Este livro segue um terceiro caminho, botando a mão na massa o tempo todo, mas explicando os conceitos por trás de cada código, num ritmo que começa devagar e vai acelerando conforme o leitor vai se habituando ao Clojure.")]),o("p",{staticClass:"text-justify"},[e._v("Ao escrever este livro tentamos apresentar as informações com o máximo de simplicidade possível, para que o leitor que nunca teve contato com LISP ou programação funcional consiga absorver todo o conteúdo sem problemas.")]),o("box",{attrs:{title:"Abrindo parênteses"}},[o("p",{staticClass:"text-justify"},[e._v("No decorrer do livro teremos essas caixas, chamadas pelos editores de "),o("i",[e._v("boxes")]),e._v(", que contém dicas e conteúdo relacionado ao assunto que estamos vendo.")]),o("p",{staticClass:"text-justify"},[e._v("Geralmente são textos que apresentam conceitos que não influem diretamente no texto, mas fazem com que você entenda o que há por trás de um conceito ou que experimente algo diferente sem que o texto em si perca o ritmo.")]),o("p",{staticClass:"text-justify"},[e._v("Caso esteja com muita pressa, você pode pular o conteúdo do "),o("i",[e._v("box")]),e._v(" sem prejuízo para a leitura e voltar mais tarde, depois de descansar um pouco.")])]),o("p",{staticClass:"text-justify"},[e._v("No decorrer do livro são usadas algumas convenções que vale a pena conhecer:")]),o("p",{staticClass:"text-justify"},[o("i",[e._v("Trechos em itálico")]),e._v(" indicam termos em inglês ou outro idioma que não costumam ser traduzidos ou "),o("i",[e._v("links")]),e._v(" para sites. Por exemplo, neste livro você vai encontrar a palavra "),o("i",[e._v("framework")]),e._v(" ao invés de arcabouço, pelo bem da leitura.")]),o("p",{staticClass:"text-justify"},[o("b",[e._v("Trechos em negrito")]),e._v(" indicam pontos muito importantes que "),o("b",[e._v("devem ser lidos com maior atenção")]),e._v(".")]),o("p",{staticClass:"text-justify"},[o("code",[e._v("Trechos em fonte monoespaçada")]),e._v(" indicam código, nomes de arquivos, classes ou "),o("i",[e._v("namespaces")]),e._v(".")]),o("h2",[e._v("1.4 Lista de discussão e código fonte")]),o("p",{staticClass:"text-justify"},[e._v("Disponibilizamos uma lista de discussão sobre o livro, onde você pode tirar suas dúvidas, apontar correções, indicar melhorias e o que mais achar relevante para o outros leitores:")]),o("index",{attrs:{entry:"lista de discussão"}}),o("p",{staticClass:"text-justify"},[e._v("http://goo.gl/eYmGy"),o("br"),e._v("\nou\nhttps://groups.google.com/forum/?fromgroups#!forum/casadocodigo-clojure")]),o("p",{staticClass:"text-justify"},[e._v("O código fonte estará disponível no GitHub, no endereço abaixo:")]),o("index",{attrs:{entry:"código fonte"}}),o("p",{staticClass:"text-justify"},[e._v("https://github.com/pbalduino/livro-clojure")]),o("p",{staticClass:"text-justify"},[e._v("Sinta-se à vontade para enviar dúvidas e alterar os fontes conforme você for avançando no livro.")])],1)},Xa=[],Ga={name:"Presentation"},Qa=Ga,Ka=Object(m["a"])(Qa,Ua,Xa,!1,null,null,null),Wa=Ka.exports,Za=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("h1",[e._v("3. O REPL é tão importante...")]),o("chapter-quote",{attrs:{author:"Brian Kernighan,",work:"coautor do UNIX e da linguagem C"}},[e._v('"A única forma de se aprender uma nova linguagem é escrevendo programas nela"')]),o("h2",[e._v("3.1. ... que merece um capítulo a parte")]),o("index",{attrs:{entry:"REPL"}}),o("p",{staticClass:"text-justify"},[e._v("O "),o("code",[e._v("REPL")]),e._v(" é uma das ferramentas mais úteis para se programar em Clojure. Se você está chegando do Ruby ou do Python está mais do que acostumado a usar o "),o("code",[e._v("IRB")]),e._v(" ou o modo interativo do Python. Veremos no decorrer do capítulo que o REPL é bem mais do que um prompt da linguagem, que serve apenas para que instruções sejam testadas.")]),o("p",{staticClass:"text-justify"},[e._v("O termo "),o("code",[e._v("REPL")]),e._v(", pronuncia-se "),o("i",[e._v("Répol")]),e._v(" com aquele "),o("i",[e._v("R")]),e._v(" do Chico Bento, é formado pelas iniciais de "),o("i",[e._v("Read-Eval-Print-Loop")]),e._v(", que é o ciclo efetuado pela ferramenta ao "),o("b",[e._v("Ler")]),e._v(" a instrução digitada pelo programador, "),o("b",[e._v("avaliar")]),e._v(" e executar a instrução, "),o("b",[e._v("imprimir")]),e._v(" o resultado e "),o("b",[e._v("voltar")]),e._v(" ao início, aguardando a próxima instrução, como na figura "),o("ref-label",{attrs:{entry:"repl-diagram"}}),e._v(".")],1),o("image",{attrs:{src:"images/capitulo_03/repl_diagram.png",description:"Read-eval-print-loop",width:"40%",label:"repl-diagram"}}),o("box",{attrs:{title:"O que é avaliar?"}},[o("index",{attrs:{entry:"avaliar"}}),o("p",{staticClass:"text-justify"},[e._v("Quando estamos usando algum dialeto LISP, como é o caso do Clojure, é comum usarmos o termo "),o("b",[e._v("avaliar")]),e._v(" para descrever o momento em que o comando é analisado e executado pelo interpretador da linguagem.")]),o("p",{staticClass:"text-justify"},[e._v("Então, sempre que você se deparar com o verbo "),o("b",[e._v("avaliar")]),e._v(", entenda que a instrução está sendo lida e interpretada.")])],1),o("p",{staticClass:"text-justify"},[e._v("A grande vantagem dessa abordagem é que o desenvolvedor vê o resultado imediatamente, sem a necessidade de compilar o projeto, executar e esperar a resposta. Com isso, você pode testar diferentes abordagens e até mesmo brincar com instruções para chegar ao resultado esperado num período muito curto.")]),o("p",{staticClass:"text-justify"},[e._v("Após instalarmos o Leiningen, como vimos no capítulo passado, vamos abrir o REPL executando o comando abaixo no seu terminal:")]),o("snippet",[e._v("lein repl")]),o("p",{staticClass:"text-justify"},[e._v("Vamos ver mensagens parecidas com a da figura "),o("ref-label",{attrs:{entry:"lein-repl"}}),e._v(".")],1),o("image",{attrs:{src:"images/capitulo_03/lein_repl.png",description:"REPL do Clojure",width:"70%",label:"lein-repl"}}),o("p",{staticClass:"text-justify"},[e._v("Essas mensagens foram adicionadas na versão 1.5 do Clojure e te dão algumas dicas sobre como se achar dentro da ferramenta. Para nós, o importante agora vai ser a última linha, que tem o cursor piscando, aguardando os nossos comandos.")]),o("snippet",[e._v("user=>")]),o("index",{attrs:{entry:"namespace"}}),o("index",{attrs:{entry:"user"}}),o("p",{staticClass:"text-justify"},[e._v("O texto "),o("code",[e._v("user")]),e._v(" indica o "),o("i",[e._v("namespace")]),e._v(" em que estamos trabalhando. Vamos falar disso mais para frente, mas por enquanto é suficiente saber que um "),o("i",[e._v("namespace")]),e._v(" é como se fosse um pacote contendo funções que lidam com determinada parte do trabalho. Outras linguagens implementam essa forma de organização, como o Java com "),o("i",[e._v("packages")]),e._v(", C# e C++ também com "),o("i",[e._v("namespaces")]),e._v(" ou Ruby e Python com "),o("i",[e._v("modules")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Vamos começar exibindo valores simples, omitindo a exibição do namespace para evitar confusão ao digitar. Perceba que não estamos usando parênteses, já que se tratam de valores, e não expressões a serem avaliadas:")]),o("snippet",[e._v('\n1\n\ntrue\n\n"Texto"\n')]),o("p",{staticClass:"text-justify"},[e._v("Exibimos um número inteiro, um valor lógico e um texto. A saída dos dados pode ser vista na figura "),o("ref-label",{attrs:{entry:"repl-values"}}),e._v(".")],1),o("image",{attrs:{src:"images/capitulo_03/repl_values.png",description:"Exibindo valores simples",width:"90%",label:"repl-values"}}),o("p",{staticClass:"text-justify"},[e._v("Vamos agora executar algumas expressões. Como já dissemos, uma expressão deve estar entre parênteses para ser executada, ou se preferir, avaliada.")]),o("index",{attrs:{entry:"not"}}),o("index",{attrs:{entry:"or"}}),o("snippet",[e._v("\n;; uma soma simples\n(+ 1 2)\n; 3\n\n;; o operador not e um valor booleano\n(not true)\n; false\n\n;; o operador or e dois valores booleanos\n(or false true)\n; true\n")]),o("p",{staticClass:"text-justify"},[e._v("Podemos ver o resultado na figura "),o("ref-label",{attrs:{entry:"repl-expressions"}}),e._v(".")],1),o("image",{attrs:{src:"images/capitulo_03/repl_expressions.png",description:"Exibindo os resultados de expressões",width:"90%",label:"repl-expressions"}}),o("p",{staticClass:"text-justify"},[e._v("Uma coisa interessante que o uso da notação prefixa permite é que um operador não precisa trabalhar com os valores de dois em dois, como acontece com uma adição ou um operador lógico na notação infixa.")]),o("p",{staticClass:"text-justify"},[e._v("É possível, por exemplo, somar inúmeros valores de uma vez só, tendo o resultado da figura "),o("ref-label",{attrs:{entry:"repl-multiple-values"}}),e._v(".")],1),o("snippet",[e._v("\n; uma soma com vários valores\n(+ 1 2 3 4 5 6)\n\n; o operador or com vários valores\n(or true false true false true true)\n")]),o("image",{attrs:{src:"images/capitulo_03/repl_multiple_values.png",width:"90%",description:"Múltiplos valores",label:"repl-multiple-values"}}),o("index",{attrs:{entry:"println"}}),o("index",{attrs:{entry:"print"}}),o("p",{staticClass:"text-justify"},[e._v("Existe uma função chamada "),o("code",[e._v("println")]),e._v(" que, veja só, imprime valores na tela e pula uma linha. Há uma irmã dela que não pula linha e chama-se "),o("code",[e._v("print")]),e._v(", mas dificilmente vamos usá-la aqui.")]),o("index",{attrs:{entry:"nil"}}),o("p",{staticClass:"text-justify"},[e._v("Essa função "),o("code",[e._v("println")]),e._v(" retorna "),o("code",[e._v("nil")]),e._v(", que é a representação de um valor nulo no Clojure. Por conta disso, não se preocupe com o "),o("code",[e._v("nil")]),e._v(" que é exibido após a impressão do valor.")]),o("p",{staticClass:"text-justify"},[e._v("Você pode passar quantos parâmetros quiser para essa função, e ela vai imprimir um a um, até terminar.")]),o("snippet",[e._v('\n(println 3)\n\n(println "Um texto" "Outro texto")\n')]),o("p",{staticClass:"text-justify"},[e._v("Primeiro mandamos imprimir na tela um valor qualquer e, em seguida, mandamos exibir dois textos. Podemos ver como ficou na figura "),o("ref-label",{attrs:{entry:"repl-println"}}),e._v(".")],1),o("p",{staticClass:"text-justify"},[e._v("Perceba que os valores são impressos e, logo abaixo, é exibido "),o("code",[e._v("nil")]),e._v(". A impressão é o "),o("i",[e._v("efeito colateral")]),e._v(" da função, e "),o("code",[e._v("nil")]),e._v(" é o retorno.")]),o("image",{attrs:{src:"images/capitulo_03/repl_println.png",description:"Usando a função println",width:"90%",label:"repl-println"}}),o("p",{staticClass:"text-justify"},[e._v("Agora vamos imprimir o resultado da soma entre os números "),o("i",[e._v("1")]),e._v(" e "),o("i",[e._v("2")]),e._v(", conforme a figura "),o("ref-label",{attrs:{entry:"repl-println-expression-fail"}})],1),o("image",{attrs:{src:"images/capitulo_03/repl_println_expression_fail.png",description:"Não imprimiu o que queríamos",width:"90%",label:"repl-println-expression-fail"}}),o("p",{staticClass:"text-justify"},[e._v("Ao invés do número "),o("i",[e._v("3")]),e._v(", foram exibidos os três itens da nossa expressão: o sinal de adição, que nada mais é do que o nome de uma função, e os números "),o("i",[e._v("1")]),e._v(" e "),o("i",[e._v("2")]),e._v(".")]),o("index",{attrs:{entry:"+"}}),o("index",{attrs:{entry:"-"}}),o("index",{attrs:{entry:"*"}}),o("index",{attrs:{entry:"/"}}),o("index",{attrs:{entry:"="}}),o("index",{attrs:{entry:">"}}),o("index",{attrs:{entry:"<"}}),o("index",{attrs:{entry:"_"}}),o("p",{staticClass:"text-justify"},[e._v("Em Clojure, os sinais "),o("code",[e._v("+")]),e._v(", "),o("code",[e._v("-")]),e._v(", "),o("code",[e._v("*")]),e._v(", "),o("code",[e._v("/")]),e._v(", "),o("code",[e._v("=")]),e._v(", "),o("code",[e._v(">")]),e._v(", "),o("code",[e._v("<")]),e._v(" e "),o("code",[e._v("_")]),e._v(", e as combinações entre eles, são considerados nomes válidos de função.")]),o("index",{attrs:{entry:"if"}}),o("p",{staticClass:"text-justify"},[e._v("O aprendizado fica muito mais fácil quando você percebe que os operadores aritméticos, lógicos e de comparação são funções como quaisquer outras. De certo modo, até mesmo um "),o("code",[e._v("if")]),e._v(" é uma função em Clojure.")]),o("p",{staticClass:"text-justify"},[e._v("Aí você pergunta: "),o("i",[e._v('"mas, se + é um nome válido de função, por que foi que o REPL imprimiu '),o("code",[e._v("#<core$_PLUS_ ...>")]),e._v(' ao invés do sinal de adição?"')])]),o("index",{attrs:{entry:"bytecode"}}),o("p",{staticClass:"text-justify"},[e._v("Simplesmente porque o Clojure gera "),o("i",[e._v("bytecode")]),e._v(" que é executado na JVM (ou na máquina virtual do .NET), e os símbolos citados acima não são nomes válidos nesses ambientes. Então a linguagem é obrigada a criar uma função interna chamada "),o("code",[e._v("_PLUS_")]),e._v(" que ganha o apelido "),o("code",[e._v("+")]),e._v(" para que o seu código fique fácil de ler.")]),o("box",{attrs:{title:"O que é bytecode"}},[o("p",{staticClass:"text-justify"},[e._v("Uma das ideias mais fortes por trás do Java é "),o("i",[e._v("escreva uma vez, rode em qualquer lugar")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Para que isso aconteça, o compilador do Java gera um código intermediário, independente de plataforma, que será executado pela máquina virtual. Esse codigo intermediário é chamado genericamente de "),o("i",[e._v("bytecode")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Como aplicações escritas em Java puro e Clojure geram o mesmo tipo de bytecode, é bem simples integrarmos o código de um com o outro, como vamos ver mais no capítulo "),o("ref-label",{attrs:{entry:"capitulo-integracao-java"}}),e._v(".")],1)]),o("p",{staticClass:"text-justify"},[e._v("Vamos corrigir o nosso código para que possamos ver o resultado da soma.")]),o("p",{staticClass:"text-justify"},[e._v("Fica fácil se você pensar que queremos imprimir o resultado de "),o("code",[e._v("+ 1 2")]),e._v(", e não os itens da operação separadamente.")]),o("p",{staticClass:"text-justify"},[e._v("Para trabalharmos com o resultado da soma, vamos colocar os membros entre parênteses. Assim, o "),o("code",[e._v("REPL")]),e._v(" vai avaliar primeiro a soma e depois vai mandar imprimir o resultado.")]),o("p",{staticClass:"text-justify"},[e._v("Nosso código então vai ficar da forma abaixo, e podemos ver o resultado na figura "),o("ref-label",{attrs:{entry:"repl-println-expression-ok"}}),e._v(".")],1),o("snippet",[e._v("\n(println (+ 1 2))\n")]),o("image",{attrs:{src:"images/capitulo_03/repl_println_expression_ok.png",description:"Agora deu certo",width:"90%",label:"repl-println-expression-ok"}}),o("p",{staticClass:"text-justify"},[e._v("Agora que você já sabe usar o "),o("code",[e._v("REPL")]),e._v(" o suficiente para poder seguir os exemplos do livro, vamos aprender a sair.")]),o("p",{staticClass:"text-justify"},[e._v("Para sair do REPL existem duas formas: o jeito "),o("i",[e._v("novo")]),e._v(", incluído na versão 1.5 do Clojure, e o jeito antigo, que ainda é a utilizada no Clojure CLR e nas versões anteriores do Clojure.")]),o("index",{attrs:{entry:"exit"}}),o("p",{staticClass:"text-justify"},[e._v("Para sair pelo jeito novo, basta digitar "),o("code",[e._v("exit")]),e._v(". Como é um comando do "),o("code",[e._v("REPL")]),e._v(", e não do Clojure, não fique preocupado com o fato de não ter que usar parênteses, como podemos ver na figura "),o("ref-label",{attrs:{entry:"repl-exit-new"}}),e._v(".")],1),o("image",{attrs:{src:"images/capitulo_03/repl_exit_new.png",description:"Saindo do REPL pelo jeito novo",width:"90%",label:"repl-exit-new"}}),o("p",{staticClass:"text-justify"},[e._v("Caso você esteja com uma versão antiga, execute o método "),o("code",[e._v("exit")]),e._v(" da classe "),o("code",[e._v("System")]),e._v(" do Java, passando o número "),o("i",[e._v("0")]),e._v(" como código para informar ao sistema operacional que saída ocorreu sem erros.")]),o("snippet",[e._v("\n(System/exit 0)\n")]),o("p",{staticClass:"text-justify"},[e._v("Ao sair por esse modo, não temos a simpática mensagem de adeus, como vemos na figura "),o("ref-label",{attrs:{entry:"repl-exit-old"}}),e._v(".")],1),o("image",{attrs:{src:"images/capitulo_03/repl_exit_old.png",description:"Saindo do REPL pelo jeito anterior",width:"90%",label:"repl-exit-old"}}),o("h2",[e._v("3.2. Alguns truques rápidos com o REPL")]),o("p",{staticClass:"text-justify"},[e._v("Existem alguns atalhos e funções auxiliares que tornam o uso do REPL bem mais produtivo. Por mais que escrever diretamente no REPL não seja tão confortável quando no seu editor preferido, algumas vezes isso acaba sendo necessário.")]),o("h3",[e._v("Qual é mesmo o nome daquela função?")]),o("p",{staticClass:"text-justify"},[e._v("As funções da biblioteca padrão do Clojure vem com um texto explicativo, onde você pode se situar sobre como utilizá-las.")]),o("index",{attrs:{index:"find-doc"}}),o("p",{staticClass:"text-justify"},[e._v("Podemos pesquisar alguma palavra que estiver dentro desses textos para encontrar a função que queremos, mas não lembramos o nome. Para isso, usamos "),o("code",[e._v("find-doc")]),e._v(", seguido da palavra ou trecho de texto relacionado ao que queremos.")]),o("p",{staticClass:"text-justify"},[e._v("Vamos supor que eu esteja procurando algo sobre "),o("i",[e._v("sockets")]),e._v(". Basta digitar "),o("code",[e._v('(find-doc "socket")')]),e._v(" no REPL.")]),o("snippet",[e._v('\n(find-doc "socket")\n; -------------------------\n; clojure.tools.nrepl/connect\n; ([& {:keys [port host transport-fn], :or {transport-fn\n;  transport/bencode, host "localhost"}}])\n;  Connects to a socket-based REPL at the given host (defaults\n; to localhost) and port, returning the Transport (by default\n; clojure.\n\n; e mais um monte de coisas\n')]),o("index",{attrs:{entry:"connect"}}),o("p",{staticClass:"text-justify"},[e._v("No nosso exemplo, encontramos a função "),o("code",[e._v("connect")]),e._v(", que está no namespace "),o("code",[e._v("clojure.tools.nrepl")]),e._v(".")]),o("index",{attrs:{entry:"apropos"}}),o("p",{staticClass:"text-justify"},[e._v("Se você lembra de alguma parte do nome da função, então pode usar a função "),o("code",[e._v("apropos")]),e._v(", passando como parâmetros o trecho do nome ou uma expressão regular. Não se preocupe com expressões regulares agora, pois veremos esse assunto em detalhes mais para frente.")]),o("index",{attrs:{entry:"vector"}}),o("p",{staticClass:"text-justify"},[e._v("Vamos supor que eu esteja manipulando vetores e não lembre o nome da função, mas saiba que a estrutura chama-se "),o("code",[e._v("vector")]),e._v(":")]),o("snippet",[e._v('\n(apropos "vector")\n; (vector-of vector vector? vector-zip)\n')]),o("index",{attrs:{entry:"apropos-better"}}),o("p",{staticClass:"text-justify"},[e._v("Existe uma variação de "),o("code",[e._v("apropos")]),e._v(" chamada "),o("code",[e._v("apropos-better")]),e._v(", que informa também o namespace da função quando ela não estiver dentro do namespace "),o("code",[e._v("clojure.core")]),e._v(" ou dentro do namespace em que você estiver no momento:")]),o("snippet",[e._v('\n(apropos-better "vector")\n; (vector vector-of vector? clojure.zip/vector-zip)\n')]),o("index",{attrs:{entry:"doc"}}),o("p",{staticClass:"text-justify"},[e._v("Agora você pode usar a função "),o("code",[e._v("doc")]),e._v(" para ver a documentação daquela que mais se parecer com o que você estiver procurando:")]),o("snippet",[e._v("\n(doc vector?)\n; -------------------------\n; clojure.core/vector?\n; ([x])\n;   Return true if x implements IPersistentVector\n")]),o("index",{attrs:{entry:"javadoc"}}),o("p",{staticClass:"text-justify"},[e._v("Caso você queira ver a documentação de uma classe ou objeto Java, a função "),o("code",[e._v("doc")]),e._v(" não pode te ajudar. Felizmente é possível consultar o "),o("i",[e._v("Javadoc")]),e._v(", que é a forma padrão de documentação do Java "),o("bib",{attrs:{entry:"oracle-javadoc"}}),e._v(". Para isso usamos a função "),o("code",[e._v("javadoc")]),e._v(", obviamente:")],1),o("snippet",[e._v('\n(source java.io.File)\nSource not found\n\n(javadoc java.io.File)\n; "http://java.sun.com/javase/7/docs/api/java/io/File.html"\n')]),o("p",{staticClass:"text-justify"},[e._v("Além de retornar um texto com a localização da documentação, a função "),o("code",[e._v("javadoc")]),e._v(" também abre o seu browser padrão na página indicada, como podemos ver na figura "),o("ref-label",{attrs:{entry:"cap03-javadoc"}}),e._v(":")],1),o("image",{attrs:{src:"images/capitulo_03/javadoc.png",description:"E a função abre o browser para você",label:"cap03-javadoc",width:"70%"}}),o("p",{staticClass:"text-justify"},[e._v("Eu sempre gostei da forma como a documentação do pacote "),o("code",[e._v("java.io")]),e._v(" foi escrita e achei que daria um bom exemplo.")]),o("h3",[e._v("Um pouco de Bash na sua vida")]),o("p",{staticClass:"text-justify"},[e._v("Quando você usa o REPL por dentro do Leiningen, alguns atalhos já conhecidos pelos usuários de Bash estão disponíveis, mesmo para quem está usando o Leiningen no Windows.")]),o("index",{attrs:{entry:"Bash"}}),o("box",{attrs:{title:"O que é Bash"}},[o("i",[e._v("Bash")]),e._v(" é um dos "),o("i",[e._v("shells")]),e._v(" mais conhecidos por quem usa sistemas operacionais baseados em UNIX ou Linux. Shell é a camada mais externa do sistema operacional e onde você insere comandos e recebe os resultados, de modo similar ao que acontece no REPL.\n")]),o("p",{staticClass:"text-justify"},[e._v("O primeiro deles é a tecla "),o("i",[e._v("TAB")]),e._v(", que exibe os nomes de funções que começam com o que você já digitou.")]),o("index",{attrs:{entry:"map"}}),o("p",{staticClass:"text-justify"},[e._v("Por exemplo, vou digitar "),o("code",[e._v("map")]),e._v(" e pressionar "),o("i",[e._v("TAB")])]),o("snippet",{attrs:{language:"clojure"}},[e._v("\n(map\n; map           map-indexed   map?          mapcat        mapv\n")]),o("p",{staticClass:"text-justify"},[e._v("É possível também encontrar algum "),o("i",[e._v("namespace")]),e._v(" específico da mesma maneira que foi feita para procurar a função:")]),o("snippet",{attrs:{language:"clojure"}},[e._v("\n(clojure.s\n; clojure.set          clojure.stacktrace   clojure.string\n")]),o("p",{staticClass:"text-justify"},[e._v("Você pode usar a tecla "),o("i",[e._v("TAB")]),e._v(" para ver todas as funções disponíveis em determinado "),o("i",[e._v("namespace")]),e._v(", bastando adicionar uma barra após o nome:")]),o("snippet",{attrs:{language:"clojure"}},[e._v("\n(clojure.set/\n; clojure.set/difference clojure.set/index clojure.set/join\n; clojure.set/intersection clojure.set/map-invert\n; clojure.set/project clojure.set/rename clojure.set/rename-keys\n; clojure.set/select clojure.set/subset? clojure.set/superset?\n; clojure.set/union\n")]),o("p",{staticClass:"text-justify"},[e._v("Outra combinação que agiliza bastante o trabalho é a combinação "),o("i",[e._v("Control L")]),e._v(", ou "),o("i",[e._v("Command L")]),e._v(" se você estiver usando MacOS, que limpa os resultados das expressões anteriores e mantém apenas a expressão que você estiver digitando no momento.")]),o("p",{staticClass:"text-justify"},[e._v("Existe também a combinação "),o("i",[e._v("Control R")]),e._v(", ou "),o("i",[e._v("Command R")]),e._v(", que completa o que você estiver digitando usando o histórico de comandos do REPL. Pressionando essa combinação mais de uma vez vai alternar entre todas as combinações já utilizadas que contenham o texto que você já digitou.")]),o("p",{staticClass:"text-justify"},[e._v("Usar as setas "),o("i",[e._v("para cima")]),e._v(" ou "),o("i",[e._v("para baixo")]),e._v(" permite que você navegue nos comandos utilizados recentemente.")]),o("h3",[e._v("Recuperando os últimos resultados")]),o("index",{attrs:{entry:"*1"}}),o("index",{attrs:{entry:"*2"}}),o("index",{attrs:{entry:"*3"}}),o("index",{attrs:{entry:"*e"}}),o("p",{staticClass:"text-justify"},[e._v("Existem também símbolos especiais que guardam os resultados das últimas expressões e exceções. Eles são "),o("code",[e._v("*1")]),e._v(", "),o("code",[e._v("*2")]),e._v(" e "),o("code",[e._v("*3")]),e._v(" para os valores e "),o("code",[e._v("*e")]),e._v(" para a última exceção, ou erro, que ocorreu:")]),o("snippet",{attrs:{language:"clojure"}},[e._v('\n(+ 1 2)\n; 3\n\n(* 2 4)\n; 8\n\n(/ 8 2)\n; 4\n\n(println "Resultados anteriores:" *1 *2 *3)\n; Resultados anteriores: 4 8 3\n\n(/ 1 0)\n; ArithmeticException Divide by zero\n\n(println "Último erro:" *e)\n; Último erro: #<ArithmeticException java.lang.ArithmeticException:\n;   Divide by zero>\n')]),o("index",{attrs:{entry:"pst"}}),o("p",{staticClass:"text-justify"},[e._v("Caso você queira ver a lista de chamadas, ou "),o("i",[e._v("stacktrace")]),e._v(", do último erro, basta utilizar a função "),o("code",[e._v("pst")]),e._v(":")]),o("snippet",{attrs:{language:"clojure"}},[e._v('\n(/ 1 0)\n; ArithmeticException Divide by zero\n\n(println "Último erro:" *e)\n; Último erro: #<ArithmeticException java.lang.ArithmeticException:\n;   Divide by zero>\n\nuser=> (pst)\n; java.lang.ArithmeticException: Divide by zero\n; Numbers.java:156 clojure.lang.Numbers.divide\n; Numbers.java:3691 clojure.lang.Numbers.divide\n; ... um monte de linhas ...\n; Thread.java:745 java.lang.Thread.run\n')]),o("h3",[e._v("Consultando o código fonte")]),o("p",{staticClass:"text-justify"},[e._v("Algumas vezes é bom ter acesso ao código fonte de determinada função ou macro para que possamos entender melhor como ela funciona. Enquanto eu escrevia este livro, fiz isso constantemente para descobrir como as coisas funcionam por baixo dos panos.")]),o("p",{staticClass:"text-justify"},[e._v("Infelizmente, nem sempre é simples ir até o site onde o código fonte do Clojure está disponível e procurar o arquivo em que aquela função está definida.")]),o("p",{staticClass:"text-justify"},[e._v("Pior ainda quando a versão que está lá é diferente da versão que você está usando no momento. E fica ainda pior quando você não tem acesso ao código fonte da biblioteca que estiver utilizando.")]),o("index",{attrs:{entry:"source"}}),o("p",{staticClass:"text-justify"},[e._v("Para nos ajudar, existe a macro "),o("code",[e._v("source")]),e._v(", que recebe como parâmetro o nome da função, sem aspas, e exibe o respectivo código fonte, quando possível.")]),o("p",{staticClass:"text-justify"},[e._v("Existem casos em que isso não é possível, como quando você tentar ler o fonte de uma forma especial ou de um código que foi compilado utilizando AOT (veremos isso em detalhes mais para frente).")]),o("p",{staticClass:"text-justify"},[e._v("Vamos exibir o código fonte da função "),o("code",[e._v("+")]),e._v(", responsável por somar dois ou mais números:")]),o("snippet",{attrs:{language:"clojure"}},[e._v('\n(source +)\n; (defn +\n;   "Returns the sum of nums. (+) returns 0. Does not auto-promote\n;   longs, will throw on overflow. See also: +\'"\n;   {:inline (nary-inline \'add \'unchecked_add)\n;    :inline-arities >1?\n;    :added "1.2"}\n;   ([] 0)\n;   ([x] (cast Number x))\n;   ([x y] (. clojure.lang.Numbers (add x y)))\n;   ([x y & more]\n;      (reduce1 + (+ x y) more)))\n')]),o("p",{staticClass:"text-justify"},[e._v("Note que temos acesso a todos os detalhes internos da função "),o("code",[e._v("+")]),e._v(", incluindo sua documentação e mais algumas informações que são úteis para o compilador ou para alguma função que gere documentação automaticamente.")]),o("p",{staticClass:"text-justify"},[e._v("Ao tentarmos ver o código fonte de uma forma especial ou de algum código escrito nativamente em Java, receberemos uma mensagem de que o código fonte não foi encontrado:")]),o("snippet",{attrs:{language:"clojure"}},[e._v("\n(source Thread/sleep)\n; Source not found\n")]),o("h2",[e._v("3.3. Desenvolvimento baseado no REPL")]),o("p",{staticClass:"text-justify"},[e._v("Uma das características que faz o Clojure tão interessante para desenvolvermos software é que o REPL não é apenas um "),o("i",[e._v("console")]),e._v(" da linguagem. Ele não serve apenas para que você teste expressões ou funções de uma biblioteca. Com o REPL você pode "),o("b",[e._v("alterar o programa enquanto ele está sendo executado")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Se você trabalha com Java e utiliza TDD, o seu workflow pode ser resumido em escrever um teste, rodar o teste e vê-lo falhar. Em seguida você escreve o código necessário para que o teste passe e então recomeça o ciclo até concluir o desenvolvimento.")]),o("index",{attrs:{entry:"warmup"}}),o("p",{staticClass:"text-justify"},[e._v("A cada vez que você roda os testes, a JVM demora algum tempo carregando a si mesma até começar a executar o conjunto de testes que você selecionou. Esse tempo é chamado de "),o("i",[e._v("warmup")]),e._v(". Existem técnicas para reduzir esse tempo, mas é inevitável que ele exista.")]),o("p",{staticClass:"text-justify"},[e._v("Para executar a aplicação há um tempo gasto com a compilação, o tempo de warmup da JVM e só então sua aplicação começa a ser executada.")]),o("p",{staticClass:"text-justify"},[e._v("Quando você desenvolve em Ruby, mais especificamente quando está utilizando Rails, o console da linguagem permite que você altere dados da aplicação enquanto ela está sendo executada, mas você não pode alterar a estrutura do que já foi carregado, como objetos e funções.")]),o("p",{staticClass:"text-justify"},[e._v("É aqui que o Clojure começa a mostrar a sua diferença: você pode alterar código e dados durante a execução do programa, mesmo que eles já tenham sido carregados, sem que para isso você perca tempo esperando o warmup da JVM ou recompilando a aplicação.")]),o("h2",[e._v("3.4. Criando uma aplicação de exemplo")]),o("p",{staticClass:"text-justify"},[e._v("Vamos criar uma pequena aplicação para demonstrar como isso funciona na prática.")]),o("index",{attrs:{entry:"lein new"}}),o("p",{staticClass:"text-justify"},[e._v("Primeiro, execute o comando "),o("code",[e._v("lein new capitulo03")]),e._v(" para criar um novo projeto. Será criado um diretório chamado "),o("code",[e._v("capitulo03")]),e._v(" com um esqueleto dessa aplicação. Não se preocupe com a estrutura que foi criada, pois mais para frente vamos explicar em detalhes o que é cada arquivo e cada diretório.")]),o("index",{attrs:{entry:"namespace"}}),o("p",{staticClass:"text-justify"},[e._v("Dentro do diretório "),o("code",[e._v("src/capitulo03")]),e._v(" existe um arquivo chamado "),o("code",[e._v("core.clj")]),e._v(". Ele contém o "),o("i",[e._v("namespace")]),o("code",[e._v("capitulo03.core")]),e._v(", que informamos dentro do arquivo "),o("code",[e._v("project.clj")]),e._v(", e isso é declarado logo na primeira linha, por meio da instrução "),o("code",[e._v("(ns capitulo03.core)")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Vamos criar agora uma função chamada "),o("code",[e._v("texto")]),e._v(". Essa função apenas imprime "),o("i",[e._v('"Texto original"')]),e._v(" na tela. Para isso usaremos a função "),o("code",[e._v("println")]),e._v(", que imprime os valores passados por parâmetro para saída padrão. Nossa função ficará assim:")]),o("snippet",{attrs:{language:"clojure"}},[e._v('\n(defn texto []\n  (println "Texto original"))\n')]),o("index",{attrs:{entry:"entry point"}}),o("index",{attrs:{entry:"loop"}}),o("p",{staticClass:"text-justify"},[e._v("Em seguida, vamos criar a função "),o("code",[e._v("-main")]),e._v(", que é a função inicial da aplicação, ou "),o("i",[e._v("entry point")]),e._v(". Nela vamos criar um "),o("i",[e._v("loop")]),e._v(" infinito que invoca a função "),o("code",[e._v("texto")]),e._v(" e faz uma pausa de dois segundos. Não se preocupe com os detalhes, já que vamos explicar todos eles mais para frente.")]),o("index",{attrs:{entry:";"}}),o("index",{attrs:{entry:"comentários"}}),o("p",{staticClass:"text-justify"},[e._v("Os comentários, iniciados pelo caracter "),o("code",[e._v(";")]),e._v(" foram adicionados para que você não se perca logo no terceiro capítulo do livro:")]),o("index",{attrs:{entry:"Thread/sleep"}}),o("snippet",{attrs:{language:"clojure"}},[e._v("\n(defn -main [& args]\n  (loop []              ; inicia o loop\n    (texto)             ; chama a função texto\n    (Thread/sleep 2000) ; espera dois segundos\n    (recur)))           ; retorna ao início do loop\n")]),o("index",{attrs:{entry:"lein repl"}}),o("p",{staticClass:"text-justify"},[e._v("Agora salve o arquivo e volte ao diretório "),o("code",[e._v("capitulo03")]),e._v(", execute o comando "),o("code",[e._v("lein repl")]),e._v(" para abrir o "),o("i",[e._v("REPL")]),e._v(". Note que na primeira linha é exibido um texto dizendo que o "),o("i",[e._v("nREPL")]),e._v(" foi iniciado em uma determinada porta, no IP "),o("i",[e._v("127.0.0.1")]),e._v(". Anote o número dessa porta, pois vamos precisar daqui a pouco.")]),o("p",{staticClass:"text-justify"},[e._v("Execute a instrução "),o("code",[e._v("(use 'capitulo03.core)")]),e._v(" para importar as funções do namespace "),o("i",[e._v("capitulo03.core")]),e._v(". Isso vai ser necessário para que possamos executar as duas funções que acabamos de criar.")]),o("p",{staticClass:"text-justify"},[e._v("Agora execute a instrução "),o("code",[e._v("(-main)")]),e._v(" para iniciar nossa aplicação. A cada dois segundos será impresso "),o("i",[e._v("Texto original")]),e._v(".")]),o("h2",[e._v("3.5. Modificando a aplicação através do REPL")]),o("p",{staticClass:"text-justify"},[e._v("Abra uma nova janela do Terminal, vá ao diretório "),o("code",[e._v("capitulo03")]),e._v(" e execute o comando "),o("code",[e._v("lein repl :connect 127.0.0.1:XXXX")]),e._v(", substituindo "),o("code",[e._v("XXXX")]),e._v(" pela porta que você anotou.")]),o("p",{staticClass:"text-justify"},[e._v("Execute a instrução "),o("code",[e._v("(ns capitulo03.core)")]),e._v(" para que possamos trabalhar dentro do namespace em que criamos nossas funções e, em seguida, execute "),o("code",[e._v("(texto)")]),e._v(" para que seja exibido o texto atual, conforme programamos anteriormente.")]),o("p",{staticClass:"text-justify"},[e._v("Agora, usando esse REPL que acabamos de abrir, vamos modificar a aplicação que está sendo executada na outra janela. Digite o código a seguir e vamos analisar o que acontece:")]),o("snippet",{attrs:{language:"clojure"}},[e._v('\n(defn texto []\n  (println "Agora mudou"))\n')]),o("p",{staticClass:"text-justify"},[e._v("Ao executar novamente a instrução "),o("code",[e._v("(texto)")]),e._v(", veremos que o texto exibido foi alterado. Agora volte à janela onde a aplicação está sendo executada e veja o que aconteceu.")]),o("p",{staticClass:"text-justify"},[e._v("O texto exibido a cada dois segundos mudou instantaneamente de "),o("i",[e._v("Texto original")]),e._v(" para "),o("i",[e._v("Agora mudou")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Mas o que aconteceu?")]),o("index",{attrs:{entry:"nREPL"}}),o("p",{staticClass:"text-justify"},[e._v("A aplicação estava sendo executada em uma janela, por dentro de um REPL. O REPL disponibilizado pelo Leiningen vem com uma biblioteca embutida chamada nREPL, que permite que possamos conectar remotamente outro REPL em uma aplicação, e por isso são exibidos um endereço IP e o número de uma porta.")]),o("p",{staticClass:"text-justify"},[e._v("Quando conectamos o REPL da segunda janela na aplicação que imprime o texto a cada dois segundos, estamos conectados "),o("i",[e._v("dentro")]),e._v(" da aplicação. Então, toda alteração que você fizer dentro da segunda janela, será instantaneamente refletida na aplicação da primeira janela.")]),o("index",{attrs:{entry:"Vim"}}),o("index",{attrs:{entry:"Emacs"}}),o("index",{attrs:{entry:"Cider"}}),o("index",{attrs:{entry:"Fireplace"}}),o("index",{attrs:{entry:"Lighttable"}}),o("p",{staticClass:"text-justify"},[e._v("Esse recurso fica ainda mais interessante quando você utiliza um editor de texto que se conecte automaticamente ao REPL, como é o caso do "),o("i",[e._v("Vim")]),e._v(" através do plugin "),o("code",[e._v("fireplace")]),e._v(", do "),o("i",[e._v("Emacs")]),e._v(" através do pacote "),o("code",[e._v("Cider")]),e._v(", ou do "),o("i",[e._v("Lighttable")]),e._v(", editor utilizado nesse livro, que já vem com esse recurso instalado por padrão.")]),o("p",{staticClass:"text-justify"},[e._v("Essa integração com o editor permite que o seu código seja enviado de forma transparente ao REPL, sem que você precise escrever a mesma coisa no editor e depois no REPL, fazendo com que você tenha todas as vantagens do seu editor preferido somado à agilidade que ganhamos ao alterar a aplicação enquanto ela está sendo executada, sem necessidade de a recompilarmos ou esperarmos que ela seja carregada novamente.")]),o("p",{staticClass:"text-justify"},[e._v("Existem vários textos pela Internet explicando como os autores usam esse recurso para criar um fluxo de trabalho ágil e produtivo. Fique à vontade para experimentar e descobrir seu próprio jeito de trabalhar.")]),o("p",{staticClass:"text-justify"},[e._v("Caso seu editor preferido não dê suporte ao nREPL, não se preocupe. Durante o livro vamos explicar cada exemplo sem a necessidade de usarmos esse recurso. Se você não usar, tudo bem. Mas se resolver usar, vai ser melhor ainda.")]),o("p",{staticClass:"text-justify"},[e._v("A partir do próximo capítulo vamos aumentar o ritmo e entrar a fundo na linguagem, apresentando todos os recursos necessários para que você consiga usar Clojure para resolver problemas de verdade e, de repente, até mesmo convencer seus colegas de que vale a pena aprender e usar no trabalho.")])],1)},Ya=[],eo={name:"Repl"},ao=eo,oo=Object(m["a"])(ao,Za,Ya,!1,null,null,null),to=oo.exports,so=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("h1",[e._v("Agradecimentos")]),o("chapter-quote",{attrs:{author:"Joseph Campbell"}},[e._v("\n  \"If the path before you is clear, you're probably on someone else's.\"\n  ")]),o("p",{staticClass:"text-justify"},[e._v("Escrever um livro sobre Clojure em Português, utilizando material original e de uma forma que torne a linguagem acessível mesmo para quem nunca ouviu falar em programação funcional é um trabalho imenso e demorado que eu não teria conseguido concluir sozinho.")]),o("p",{staticClass:"text-justify"},[e._v("Foi um trabalho que levou alguns anos de escrita e reescrita, com capítulos sendo inteiramente jogados fora para que apenas o melhor sobrevivesse.")]),o("p",{staticClass:"text-justify"},[e._v("Minhas sinceras desculpas se eu me esquecer de alguém. Eu juro que não foi por mal.")]),o("p",{staticClass:"text-justify"},[o("b",[e._v("Minha esposa e meus filhos, que mais uma vez tiveram que me aturar sentado no computador por horas e dias até que eu finalmente conseguisse terminar este projeto")]),e._v(".")]),o("p",{staticClass:"text-justify"},[e._v("Ao amigo Francelino Guilherme que, ao ensinar conceitos de programação para crianças, me apresentou excelentes analogias para conceitos complicados para quem não desenvolve softwares.")]),o("p",{staticClass:"text-justify"},[e._v("Paulo Suzart pelo apoio desde o primeiro momento. Paulo foi, até onde eu sei, o primeiro brasileiro a escrever sobre Clojure em Português e continua nessa tarefa até hoje.")]),o("p",{staticClass:"text-justify"},[e._v("Thank you very much Joshua Glover, Chas Emerick, Michael Fogus, Bozhidar Batsov, Zachary Kim, Tom and Rich Hickey, Leonardo Borges and all the people from Clojure list.")]),o("p",{staticClass:"text-justify"},[e._v("Paulo Silveira, Adriano Almeida e Igor Hercowitz, que compraram a ideia maluca de lançar um livro sobre Clojure num momento em que ela parecia maluca.")]),o("p",{staticClass:"text-justify"},[e._v("Nicolas França, João Ferreira, Rodrigo Lorca, Ricardo Valeriano, Ana Gabriel, Rodrigo Flores, Edilson Peçanha, Andrew Rosa, Renan Reis, Gilmar Soares, que foram revisores de primeira hora e tiveram a honestidade de apontar onde a coisa não estava boa.")]),o("p",{staticClass:"text-justify"},[e._v("A todos os participantes dos Grupos de Usuários Clojure de São Paulo e Rio de Janeiro, Clojure Brasil e Clojure Portugal, e também aos grupos GURU-SP, Scaladores e Clojure Australia (o antigo clj-syd) por terem servido de inspiração e modelo de como manter um grupo de usuários com um ambiente bacana e organizado.")]),o("p",{staticClass:"text-justify"},[e._v("Colegas de trabalho que participaram de uma forma ou de outra do nascimento deste livro; Rodrigo Vidal, Luiz Costa, Douglas 'qmx' Campos, Breno Ferreira, Henrique Weissmann, José Valim, colegas que estão ajudando ativamente a divulgar e popularizar a programação funcional e o Clojure.")])],1)},ro=[],io={name:"Thanks"},no=io,uo=Object(m["a"])(no,so,ro,!1,null,null,null),co=uo.exports,lo=function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("page",[o("h1",[e._v("Aviso")]),o("p",{staticClass:"text-justify"},[e._v("\n  Aprender programação funcional, Clojure, ou qualquer outra forma de "),o("i",[e._v("LISP")]),e._v(", pode mudar definitivamente a forma como você enxerga o desenvolvimento de software.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  São esperados efeitos colaterais como aumento de produtividade, concisão de código, surgimento ou aumento dos questionamento sobre as formas atualmente aceitas para se resolver problemas e, em alguns casos, aparecimento ou aumento de pragmatismo.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Foram relatados casos de euforia por conta de um evento chamado "),o("i",[e._v("iluminação")]),e._v(", onde o desenvolvedor subitamente entende a forma funcional de pensar.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  O autor e a editora não assumem a responsabilidade pelo fato de você se tornar um desenvolvedor ainda melhor e mais curioso após a leitura deste livro.\n  ")]),o("p",{staticClass:"text-justify"},[e._v("\n  Continue por sua conta e risco.\n  ")])])},mo=[],po={name:"Warning"},vo=po,_o=Object(m["a"])(vo,lo,mo,!1,null,null,null),fo=_o.exports;t["a"].config.productionTip=!1,t["a"].use(s["a"]),t["a"].use(n["a"]),t["a"].component("bib",b),t["a"].component("index",ze),t["a"].component("ref-label",Se),t["a"].component("box",P),t["a"].component("chapter-quote",k),t["a"].component("image",he),t["a"].component("page",We),t["a"].component("snippet",_a);var go=!0,xo=[{path:"/",component:_e,meta:{next:"/online"}},{path:"/online",component:Ha,meta:{next:"/dedication",previous:"/",title:"Sobre a versão online"}},{path:"/dedication",component:za,meta:{previous:"/online",next:"/foreword",title:"Dedicatória"}},{path:"/foreword",component:Sa,meta:{previous:"/dedication",next:"/thanks",title:"Prefácio"}},{path:"/thanks",component:co,meta:{previous:"/foreword",next:"/author",title:"Agradecimentos"}},{path:"/author",component:ha,meta:{previous:"/thanks",next:"/warning",title:"Sobre o autor"}},{path:"/warning",component:fo,meta:{previous:"/author",next:"/presentation",title:"Aviso"}},{path:"/presentation",component:Wa,meta:{previous:"/warning",next:"/gentleintro",title:"Apresentação"}},{path:"/gentleintro",component:Ja,meta:{previous:"/presentation",next:"/repl",title:"Uma introdução gentil ao Clojure"}},{path:"/repl",component:to,meta:{previous:"/gentleintro",title:"O REPL é tão importante..."}},{path:"/:chapter",component:ca,meta:{title:":("}}];window.Prism.languages.clojure={comment:/;+[^\r\n]*(\r?\n|$)/g,string:/(")(\\?.)*?\1/g,"operator ":/(::|[:|'])\b[a-zA-Z][a-zA-Z0-9 *+!-_?]*\b/g,keyword:{pattern:/([^\w+*'?-])(def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|\.|new|set!|def-|defn|defn-|defmacro|defmulti|defmethod|defstruct|defonce|declare|definline|definterface|defprotocol|defrecord|deftype|defproject|ns|\*|\+|-|->|\/|<|<=|=|==|>|>=|\.\.|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|conj|cons|constantly|cond|if-not|construct-proxy|contains\?|count|create-ns|create-struct|cycle|dec|deref|difference|disj|dissoc|distinct|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\?|ensure|eval|every\?|false\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|for|fnseq|frest|gensym|get-proxy-class|get|hash-map|hash-set|identical\?|identity|if-let|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\?|last|lazy-cat|lazy-cons|left|lefts|line-seq|list\*|list|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|name|namespace|neg\?|new|newline|next|nil\?|node|not|not-any\?|not-every\?|not=|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\?|set|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\?|split-at|split-with|str|string\?|struct|struct-map|subs|subvec|symbol|symbol\?|sync|take|take-nth|take-while|test|time|to-array|to-array-2d|tree-seq|true\?|union|up|update-proxy|val|vals|var-get|var-set|var\?|vector|vector-zip|vector\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\?|zipmap|zipper)(?=[^\w+*'?-])/g,lookbehind:!0},boolean:/\b(true|false)\b/g,number:/\b-?(0x)?\d*\.?\d+\b/g,punctuation:/[{}[](),]/g};var jo=new s["a"]({routes:xo,scrollBehavior:function(e,a,o){return o||(e.hash?{selector:e.hash}:{x:0,y:0})}});jo.beforeEach(function(e,a,o){var t="Descobrindo Clojure";e.meta.title?document.title="".concat(t," - ").concat(e.meta.title):document.title="".concat(t),o()}),t["a"].use(i.a,{id:"UA-137706670-1",autoTracking:{screenview:!0},debug:{enabled:!go,sendHitTask:go},router:jo});var bo=new t["a"]({router:jo,render:function(e){return e(v)},data:function(){return{swipeX:-1}},methods:{handleGlobalKeyUp:function(e){var a=e.key,o=this.$route.meta;o&&("Home"===a||"h"===a?this.$router.push("/"):"ArrowRight"!==a&&"k"!==a||!o.next?"ArrowLeft"!==a&&"j"!==a||!o.previous||this.$router.push(o.previous):this.$router.push(o.next))},handleTouchStart:function(e){this.$data.swipeX=e.changedTouches[0].clientX},handleTouchEnd:function(e){var a=this.$route.meta;this.$data.swipeX-100>=e.changedTouches[0].clientX&&a.next?(this.$data.swipeX=-1,this.$router.push(a.next)):this.$data.swipeX+100<=e.changedTouches[0].clientX&&a.previous&&(this.$data.swipeX=-1,this.$router.push(a.previous))}}}).$mount("#app");jo.afterEach(function(e){bo.$ga.page({page:e.fullPath,title:document.title,location:"".concat(window.location.origin,"/#").concat(e.fullPath)})}),window.addEventListener("keyup",function(e){bo.handleGlobalKeyUp(e)}),document.addEventListener("touchstart",function(e){bo.handleTouchStart(e)}),document.addEventListener("touchend",function(e){bo.handleTouchEnd(e)})},"64a9":function(e,a,o){},"8f96":function(e){e.exports="d2b5a7f"},d140:function(e,a,o){"use strict";var t=o("f870"),s=o.n(t);s.a},ed52:function(e,a,o){"use strict";var t=o("2aad"),s=o.n(t);s.a},f870:function(e,a,o){}});