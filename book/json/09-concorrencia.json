["document",["chapter",["text"," Concorrência e multithreading"]],["paragraph",["br"]],["label",["text","capitulo-concorrencia"]],["paragraph",["br"]],["quote",["text","\"These are the days of a different paradigm\""],["text","  -- Roland Orzabal"]],["paragraph",["br"]],["section",["text","Por que se fala tanto em concorrência"]],["paragraph",["br"]],["paragraph",["text","Durante décadas vimos modelos de processadores sendo lançados um atrás do outro, cada um mais rápido que o anterior, com cada vez mais instruções, mais cache, com componentes cada vez menores."],["br"]],["paragraph",["text","Era comum vermos computadores com processadores de tantos "],["italic",["text","megahertz"]],["text"," serem suplantados por outros com mais "],["italic",["text","megahertz"]],["text",". Depois vieram os "],["italic",["text","gigahertz"]],["text"," e aparentemente os processadores estacionaram nisso."],["br"]],["index",["text","Lei de Moore"]],["index",["text","Moore, Gordon"]],["paragraph",["br"]],["paragraph",["text","No que se tornou a famosa "],["italic",["text","Lei de Moore"]],["ref",["text","moore-law"]],["text",", Gordon Moore, cofundador da Intel, observou que "],["italic",["text","o número de transistores em um circuito integrado denso dobra a cada aproximadamente dois anos"]],["text",". Isso é conseguido, em grande parte, reduzindo ao máximo o tamanho de um transistor."],["br"]],["paragraph",["text","Porém, não podemos reduzir o tamanho de um componente indefinidamente, uma vez que os "],["italic",["text","electrons"]],["text"," continuam do mesmo tamanho. Chega a um ponto em que você simplesmente não consegue passar corrente elétrica pelo componente porque ele esquenta demais, ou não tem espaço suficiente para os "],["italic",["text","electrons"]],["text"," passarem de um lado para o outro de forma ordenada."],["br"]],["paragraph",["text","Já os supercomputadores, de uso quase exclusivo de militares e grandes polos acadêmicos, evitavam, e ainda evitam, as limitações tecnológicas de suas épocas colocando processadores para trabalhar lado a lado para resolver problemas matemáticos pesados, simulações ou mesmo para jogar xadrez."],["br"]],["index",["text","Deep Blue"]],["paragraph",["br"]],["paragraph",["text","O famoso "],["italic",["text","Deep Blue"]],["text",", que derrotou o campeão de xadrez da época, tinha 30 processadores e 480 chips especialmente criados para processar jogos de xadrez trabalhando em paralelo"],["ref",["text","deep-blue"]],["text",". Praticamente qualquer computador doméstico e parte dos "],["italic",["text","smartphones"]],["text"," atualmente tem pelo menos dois núcleos de processamento, o que equivalem, falando de maneira bem leiga, a dois processadores trabalhando lado a lado."],["br"]],["paragraph",["text","Colocar processadores ou núcleos para trabalhar lado a lado é uma das formas encontradas para que o poder de processamento continue crescendo independente de limitações físicas."],["br"]],["index",["text","Paralelismo"]],["paragraph",["br"]],["paragraph",["text","Com todo esse processamento extra disponível de forma paralela, torna-se um desperdício usarmos software que só executa um processamento de cada vez, e é aí que começam a entrar em cena técnicas de "],["italic",["text","paralelismo"]],["text"," para que os recursos das máquinas mais modernas possam ser aproveitados de uma forma melhor."],["br"]],["section",["text","A diferença entre concorrência e paralelismo"]],["paragraph",["br"]],["paragraph",["text","Aí você vai coçar a cabeça e perguntar:"],["br"]],["paragraph",["italic",["text","\"Mas ué, o capítulo é sobre concorrência e até agora você falou sobre processamento paralelo e paralelismo. Então estamos falando da mesma coisa?\""]],["br"]],["paragraph",["text","Não, sagaz leitor. Não estamos falando da mesma coisa, mas estamos falando de faces de uma mesma moeda. Nem todo processamento concorrente é paralelo, assim como nem todo processamento paralelo é concorrente."],["br"]],["paragraph",["text","Mas então, qual a diferença?"],["br"]],["index",["text","Processamento paralelo"]],["paragraph",["br"]],["paragraph",["text","Primeiro vamos separar "],["italic",["text","processamento paralelo"]],["text"," de "],["italic",["text","paralelismo"]],["text","."],["br"]],["paragraph",["italic",["text","Paralelismo"]],["text"," é um conjunto de técnicas de otimização que permite que diferentes processamentos sejam executados aparentemente ao mesmo tempo."],["br"]],["paragraph",["text","Já quando falamos em "],["italic",["text","processamento paralelo"]],["text",", estamos falando de dois ou mais núcleos ou processadores trabalhando exatamente ao mesmo tempo. Isso só é possível por serem dois dispositivos fisicamente distintos."],["br"]],["index",["text","Concorrência, Definição de"]],["paragraph",["br"]],["paragraph",["text","A definição formal de concorrência a define como a propriedade de um programa, algoritmo ou problema ser decomposto em unidades que possam ser executadas de forma independente de ordem ou parcialmente dependente de ordem, sem que isso altere o resultado final"],["ref",["text","time-clock-lamport"]],["text","."],["br"]],["paragraph",["text","Na prática isso permite que mais de uma tarefa seja executada "],["italic",["text","aparentemente"]],["text"," ao mesmo tempo."],["br"]],["index",["text","Time sharing"]],["paragraph",["br"]],["paragraph",["text","Eu digo "],["italic",["text","aparentemente"]],["text"," porque, na prática, o sistema operacional ou a máquina virtual divide o tempo de processamento em partes menores e cuida para que cada processo tenha direito a usar uma dessas partes por vez. Essa técnica é chamada de "],["italic",["text","time sharing"]],["text","."],["br"]],["paragraph",["text","Imagine que quatro pessoas estão sentadas numa mesa escrevendo cartas, uma de frente para a outra, com uma folha de papel cada uma e apenas uma caneta para todos."],["br"]],["paragraph",["text","Cada pessoa pode ficar com a caneta por cinco segundos e depois deve passá-la para a pessoa que estiver sentada à direita. Assim que a pessoa terminar de escrever a respectiva carta, deve passar a caneta para o próximo e se retirar da mesa."],["br"]],["paragraph",["text","Nossos quatro escritores estão "],["italic",["text","concorrendo"]],["text"," pela mesma caneta. Para alguém que esteja fora da sala, aguardando as cartas, eles estão escrevendo quatro cartas ao mesmo tempo, mas na prática sabemos que não é isso o que está acontecendo."],["br"]],["paragraph",["text","Quanto mais pessoas você colocar na mesa, mais tempo cada carta vai demorar para ser escrita. Da mesma forma, quanto mais processos você estiver executando, ou quanto mais aplicações você utilizar ao mesmo tempo, maior a sensação de que o computador está mais lento."],["br"]],["paragraph",["text","Em uma outra situação temos quatro mesas com uma caneta cada e um texto de vinte páginas para escrever. Se deixarmos quatro escritores com uma única caneta escrevendo esse texto, numa única mesa, estaremos desperdiçando as outras três mesas e subutilizando o espaço. E se colocássemos escritores nas outras três mesas para ajudar a escrever o texto?"],["br"]],["paragraph",["text","Para isso o texto deve ser organizado para permitir que ele possa ser escrito por mais de uma pessoa ao mesmo tempo, vamos usar técnicas de "],["italic",["text","paralelização"]],["text",", conforme já dissemos."],["br"]],["paragraph",["text","No nosso cenário atual, cada mesa trabalha em "],["italic",["text","paralelo"]],["text",", enquanto cada escritor que estiver na mesa trabalha de forma "],["italic",["text","concorrente"]],["text",", dividindo a mesma caneta."],["br"]],["paragraph",["text","Então é só adicionar mais gente escrevendo, certo?"],["br"]],["paragraph",["text","É aqui que a coisa toda deixa de ser tão mágica e bonitinha. Colocar mais gente para escrever o texto só vai agilizar o processo até certo ponto."],["br"]],["paragraph",["text","Considere que vamos gastar tempo dividindo a tarefa entre as mesas e entre os escritores, considere que vamos perder tempo cada vez que os cinco segundos de cada escritor terminarem e ele tiver que passar a caneta para o próximo da mesa."],["br"]],["paragraph",["text","A partir desse ponto, adicionar mais gente vai fazer com que a tarefa demore mais para terminar."],["br"]],["index",["text","Context switching"]],["paragraph",["br"]],["box",["text","Context switching"],["paragraph",["br"]],["paragraph",["text","O termo técnico para essa passagem da caneta entre um escritor e outro mais o tempo que esse outro leva para continuar o que estava fazendo após pegar a caneta chama-se "],["italic",["text","context switching"]],["text","."],["br"]],["paragraph",["text","Pense no tempo que leva para você voltar a se concentrar no código após o chefe ter te ligado só para dizer que te mandou um email. Isso é "],["italic",["text","context switching"]],["text"," e geralmente faz com que a tarefa demore mais para ser concluída."],["br"]]],["paragraph",["br"]],["paragraph",["text","A parte boa é que o Clojure abstrai essa parte caso você não queira ter trabalho, mas também permite que você defina quantos escritores vão te ajudar a fazer o trabalho se você souber o que estiver fazendo ou quiser testar uma configuração diferente."],["br"]],["paragraph",["text","Internamente, a JVM sabe quantos núcleos ou processadores tem a máquina em que ela está, podendo distribuir de forma mais adequada cada processo que executamos. Porém, não temos como controlar ou determinar se o processamento vai ser executado verdadeiramente em paralelo, com núcleos ou processadores diferentes processando trechos de nosso código exatamente ao mesmo tempo, mas temos como fazer com que nosso código faça uso de paralelismo para que possamos usar, veja só, concorrência."],["br"]],["paragraph",["text","O assunto, por si só, daria um livro a parte. Daqueles bem grossos e cabeludos em linguagem acadêmica."],["br"]],["paragraph",["text","Vou focar em te ajudar a entender como a coisa toda funciona no Clojure, então me desculpe de antemão se eu disser que algo é uma batata quando, na realidade, for uma mandioca."],["br"]],["paragraph",["text","No contexto do Clojure e, principalmente, da JVM são grandes as chances daquilo ser tratado como batata e por isso ser chamado por esse nome."],["br"]],["index",["text","java.lang.Thread"]],["index",["text","thread"]],["paragraph",["br"]],["section",["text","Threads para o iniciante e para o iniciado"]],["paragraph",["br"]],["paragraph",["text","No capítulo sobre funções vimos as "],["italic",["text","thread macros"]],["text",", que carinhosamente chamamos de "],["italic",["text","setinhas"]],["text",". Vimos que, apesar do "],["italic",["text","thread"]],["text"," do nome, nada tem a ver com as "],["italic",["text","threads"]],["text"," que permitem que tarefas sejam executadas de forma concorrente."],["br"]],["paragraph",["text","Relembrando, a palavra "],["italic",["text","thread"]],["text"," significa, em inglês, "],["italic",["text","cordão"]],["text",", ou "],["italic",["text","barbante"]],["text",". A palavra é utilizada em qualquer sentido que denote continuidade ou sequencia, ou simplesmente algo que vá de uma ponta à outra, como um cordão."],["br"]],["paragraph",["text","Neste capítulo vamos falar de "],["italic",["text","threads"]],["ref",["text","thread-history"]],["text"," nos referindo a sequencias de processos"],["ref",["text","dijkstra-thread"]],["text"," que são executados de forma paralela, ou quase, entre si. É o caso de termos "],["italic",["text","duas ou mais threads sendo executadas simultaneamente"]],["text","."],["br"]],["paragraph",["text","Threads são a forma mais básica de utilizarmos concorrência na JVM, por isso vamos dar bastante atenção a esse recurso agora, para que você tenha uma base sólida para entender todo o resto."],["br"]],["paragraph",["text","Na JVM, todo código é executado dentro de uma "],["italic",["text","thread"]],["text",", por mais que você não se dê conta disso ou que o seu código não tenha a menor necessidade de ser executado em paralelo ou de forma concorrente."],["br"]],["paragraph",["text","Para demonstrar como isso funciona, vamos escrever um "],["italic",["text","Olá Mundo"]],["text"," diferente. Vamos chamá-lo de "],["italic",["text","Olá Thread"]],["text"," e utilizar a classe "],["monospaced",["text","Thread"]],["text"," do Java para fazer algumas operações."],["br"]],["box",["text","Código fonte"],["paragraph",["br"]],["paragraph",["text","O código fonte deste capítulo pode ser encontrado no diretório "],["monospaced",["text","/capitulo09"]],["text",". Os fontes do livro completo podem ser baixados de "],["monospaced",["text","https://github.com/pbalduino/livro-clojure"]],["text","."],["br"]]],["paragraph",["br"]],["paragraph",["text","Vamos começar criando um novo projeto chamado "],["monospaced",["text","thread-principal"]],["text",":"],["br"]],["code",["br"],["code-text","lein new app thread-principal"],["br"]],["paragraph",["br"]],["paragraph",["text","A opção "],["monospaced",["text","app"]],["text"," cria uma aplicação que pode ser executada pela linha de comando."],["br"]],["paragraph",["text","Vamos modificar o arquivo "],["monospaced",["text","src/thread_principal/core.clj"]],["text",", criando uma função chamada "],["monospaced",["text","ola-thread"]],["text","."],["br"]],["paragraph",["text","Nessa função vamos informar o nome da "],["italic",["text","thread"]],["text"," atual e, em seguida, vamos colocá-la para dormir. Uma "],["italic",["text","thread"]],["text"," dorme quando a deixamos em suspenso por um determinado tempo. Nesse tempo ela para de executar qualquer instrução e espera o tempo acabar, para só então continuar assim a execução. Esse tempo é informado em milésimos de segundos."],["br"]],["paragraph",["text","Para sabermos em qual "],["italic",["text","thread"]],["text"," estamos no momento, acessamos o método "],["monospaced",["text","currentThread"]],["text"," da classe "],["monospaced",["text","Thread"]],["text",". Ele nos retorna um objeto representando a "],["italic",["text","thread"]],["text"," atual."],["br"]],["paragraph",["text","Esse objeto tem um método chamado "],["monospaced",["text","getName"]],["text",", que nos retorna o nome da thread. Esse nome é dado à thread assim que ela é criada. "],["br"]],["paragraph",["text","Esse nome é opcional, mas acaba sendo muito útil quando temos várias threads sendo executadas ao mesmo tempo e queremos saber qual está executando determinada tarefa."],["br"]],["paragraph",["text","Quando você não dá um nome para a thread, a JVM se encarrega de criar um automaticamente."],["br"]],["paragraph",["text","A thread principal sempre recebe o nome de "],["monospaced",["text","main"]],["text",". Na prática é uma thread como qualquer outra, mas é iniciada pela JVM automaticamente sempre que o código da aplicação for iniciado."],["br"]],["paragraph",["text","Então ela é a primeira thread a ser executada e a última a ser finalizada. Quando ela terminar, sua aplicação termina junto."],["br"]],["code","clojure",["br"],["code-text","(defn- ola-thread []                                    ; 1"],["br"],["code-text","  (let [thread-name (.getName (Thread/currentThread))]  ; 2"],["br"],["code-text","    (println \"Thread atual:\" thread-name)               ; 3"],["br"],["code-text","    (println \"Dormindo:\" thread-name)                   ; 4"],["br"],["code-text","    (Thread/sleep 2000)                                 ; 5"],["br"],["code-text","    (println \"Acordei:\" thread-name)))                  ; 6"],["br"]],["paragraph",["br"]],["paragraph",["text","Dentro da função "],["monospaced",["text","-main"]],["text",", que é onde nossa aplicação começa a ser executada, vamos invocar a função "],["monospaced",["text","ola-thread"]],["text","."],["br"]],["code","clojure",["br"],["code-text","(defn -main [& args]"],["br"],["code-text","  (ola-thread))"],["br"]],["paragraph",["br"]],["paragraph",["text","Salve o código e execute-o usando o comando "],["monospaced",["text","lein run"]],["text"," no terminal, a partir do diretório raiz da sua aplicação."],["br"]],["paragraph",["text","Lembrando que o sinal "],["monospaced",["text","$"]],["text"," aqui indica apenas o prompt do terminal e não deve ser digitado."],["br"]],["code",["br"],["code-text","$ lein run"],["br"],["code-text","Thread atual: main"],["br"],["code-text","Dormindo: main"],["br"],["code-text","Acordei: main"],["br"]],["paragraph",["br"]],["paragraph",["text","Sabendo que a thread principal se chama "],["monospaced",["text","main"]],["text",", temos certeza de que estamos rodando nosso código nela."],["br"]],["paragraph",["text","Ao mandarmos a thread dormir na linha "],["monospaced",["text","5"]],["text",", a nossa aplicação parou por dois segundos, ou dois mil milésimos de segundo. "],["br"]],["paragraph",["text","A linguagem nos ajuda muito na hora de executarmos uma nova thread. Se no Java você precisava criar um objeto que implemente a interface "],["monospaced",["text","Runnable"]],["text",", escrevendo seu código dentro de um método chamado "],["monospaced",["text","run"]],["text",", no Clojure basta criar uma função e usá-la como parâmetro ao criar a thread."],["br"]],["index",["text","java.lang.Runnable"]],["paragraph",["br"]],["paragraph",["text","Isso acontece porque, internamente, toda função é um objeto Java que implementa a interface "],["monospaced",["text","Runnable"]],["text","."],["br"]],["paragraph",["text","Dessa forma você só precisa se preocupar em escrever código que funcione, deixando a burocracia para o Clojure resolver."],["br"]],["paragraph",["text","Vamos usar a própria função "],["monospaced",["text","ola-thread"]],["text"," para demonstrar essa funcionalidade. Vamos iniciar uma thread que execute "],["monospaced",["text","ola-thread"]],["text"," e, em seguida, vamos executar a mesma função na thread principal da aplicação."],["br"]],["paragraph",["text","No nosso exemplo, a thread recebe dois parametros. O primeiro é a função Clojure que será executada concorrentemente. O segundo parâmetro recebe o nome da thread e é opcional. Vamos chamar nossa thread de "],["monospaced",["text","outra"]],["text",". Podemos ver na linha "],["monospaced",["text","2"]],["text"," como criamos e executamos a thread."],["br"]],["paragraph",["text","Para iniciar uma thread, basta invocar seu método "],["monospaced",["text","start"]],["text","."],["br"]],["code","clojure",["br"],["code-text","(defn -main [& args]                      ; 1 "],["br"],["code-text","  (.start (Thread. ola-thread \"outra\"))   ; 2"],["br"],["code-text","  (ola-thread))                           ; 3"],["br"]],["paragraph",["br"]],["paragraph",["text","Ao executarmos o código, vemos que a saída fica bagunçada. Isso acontece porque as duas threads executam de forma concorrente. Aqui elas inclusive concorrem pela mesma tela para exibir suas mensagens."],["br"]],["code",["br"],["code-text","$ lein run"],["br"],["code-text","Thread atual:Thread atual:  outramain"],["br"],["code-text","Dormindo: main"],["br"],["code-text","Dormindo: outra"],["br"],["code-text","Acordei: outra"],["br"],["code-text","Acordei: main"],["br"]],["paragraph",["br"]],["index",["text","Thread scheduler"]],["paragraph",["br"]],["paragraph",["text","Como acontece no exemplo dos escritores de cartas, as threads têm seu trabalho dividido em pedaços de tempo, e o gerenciador de threads da JVM roda um pedaço de cada. Em inglês o nome desse gerenciadir é "],["italic",["text","thread scheduler"]],["text",", algo como agendador de threads."],["br"]],["paragraph",["text","Os detalhes variam muito de acordo com a arquitetura e de acordo com o sistema operacional, quando existe um, mas a ideia é basicamente a mesma para quase todos os cenários."],["br"]],["paragraph",["text","É comum acontecer de uma linha de código levar mais tempo para ser executada do que essa fatia de tempo que o gerenciador disponibiliza, então nunca dê como garantido que a linha será totalmente executada sem interferência de outra thread."],["br"]],["paragraph",["text","Esse é exatamente o que aconteceu no nosso exemplo que mostramos. A primeira thread começou a exibir o texto na tela, teve que parar a execução para que a próxima entrasse em cena. A próxima escreveu um pedaço do texto e teve que parar para que a primeira voltasse. Com isso vimos uma linha com o texto das duas threads misturadas."],["br"]],["paragraph",["text","Quer ver mais uma coisa interessante quando utilizamos concorrência na JVM?"],["br"]],["paragraph",["text","Executei o nosso exemplo três vezes seguidas. E, adivinhe? Obtive três respostas diferentes."],["br"]],["paragraph",["text","Na primeira vez, tivemos uma instrução em cada linha."],["br"]],["code",["br"],["code-text","$ lein run"],["br"],["code-text","Thread atual: main"],["br"],["code-text","Dormindo: main"],["br"],["code-text","Thread atual: outra"],["br"],["code-text","Dormindo: outra"],["br"],["code-text","Acordei: main"],["br"],["code-text","Acordei: outra"],["br"]],["paragraph",["br"]],["paragraph",["text","Na segunda, o texto misturado apareceu como "],["monospaced",["text","mainoutra"]],["text",". No nosso primeiro exemplo o texto apareceu como "],["monospaced",["text","outramain"]],["text","."],["br"]],["code",["br"],["code-text","$ lein run"],["br"],["code-text","Thread atual:Thread atual:  mainoutra"],["br"],["code-text","Dormindo: main"],["br"],["code-text","Dormindo: outra"],["br"],["code-text","Acordei: outra"],["br"],["code-text","Acordei: main"],["br"]],["paragraph",["br"]],["paragraph",["text","E na terceira execução seguida os textos apareceram todos misturados."],["br"]],["code",["br"],["code-text","$ lein run"],["br"],["code-text","Thread atual:Thread atual:  mainoutra"],["br"],["code-text","Dormindo:Dormindo:  mainoutra"],["br"],["code-text","Acordei:Acordei:  outra"],["br"],["code-text","main"],["br"]],["paragraph",["br"]],["paragraph",["text","Com esse exemplo simples podemos concluir que a ordem de execução de uma aplicação concorrente é completamente imprevisível. Dizemos que a ordem de execução é indeterminística, já que duas execuções do mesmo código utilizando os mesmos parâmetros no mesmo ambiente não retornam o mesmo resultado."],["br"]],["paragraph",["italic",["text","Relembrando que eu estou falando da JVM padrão, da Oracle, sendo executada num PC com Windows, Linux ou Mac."]],["br"]],["paragraph",["text","A falta de controle sobre a ordem de execução é apenas um dos problemas que vamos encontrar ao utilizarmos concorrência. E, acredite, é um problema dos menores."],["br"]],["section",["text","Uma caixa de soluções e um caminhão de problemas"]],["paragraph",["br"]],["paragraph",["text","Concorrência permite que você aproveite melhor o seu equipamento, permite que tarefas possam ser executadas em menos tempo e também permitem que o usuário tenha uma experiência melhor ao utilizar a sua aplicação."],["br"]],["paragraph",["text","Para cada benefício que você ganha, você recebe de bônus uma caixa cheia de problemas para gerenciar."],["br"]],["paragraph",["text","É como diz aquela piada de programador:"],["br"]],["code",["br"],["code-text","Estou com um problema. Vou usar concorrência para resolver."],["br"],["code-text","dois Agora problemas. tenho"],["br"]],["paragraph",["br"]],["paragraph",["text","É, camarada. Quando a esmola é demais, o santo desconfia."],["br"]],["paragraph",["text","Vou apresentar os principais problemas que temos ao utilizar concorrência, porque eles acontecem e, no final, todo um capítulo ensinando a trabalhar sem que esses problemas aconteçam."],["br"]],["paragraph",["text","Sempre que eu escolho uma tecnologia, eu me pergunto qual problema eu tenho hoje que ela vai me ajudar a resolver. Ao final desde capítulo você vai poder responder isso para você mesmo, sua equipe e para seu chefe com um sorriso no rosto."],["br"]],["index",["text","Race condition"]],["paragraph",["br"]],["title",["text","Race Condition"]],["paragraph",["br"]],["index",["text","Heisenbug"]],["paragraph",["br"]],["paragraph",["text","É possível que "],["italic",["text","race condition"]],["text"," seja o problema mais comum e mais difícil de resolver quando utilizamos concorrência. Ele pertence a uma classe de problemas chamados "],["italic",["text","heisenbugs"]],["text",", que enquadram todas aquelas encrencas que resolvem aparecer em produção nos momentos mais absurdos, mas que nunca conseguimos encontrar em desenvolvimento ou enquanto estamos depurando a aplicação."],["br"]],["box",["text","Heisenbug"],["paragraph",["br"]],["paragraph",["text","Heisenbug é um trocadilho com a palavra "],["italic",["text","bug"]],["text"," e o nome do físico Werner Heisenberg, que é tido como o primeiro cientista a publicar que, na física quântica, o simples fato de alguém observar um evento já é suficiente para influenciá-lo."],["br"]],["paragraph",["text","Da mesma forma, temos a impressão que um "],["italic",["text","heisenbug"]],["text"," desaparece ou se move quando está sendo caçado no código."],["br"]]],["paragraph",["br"]],["paragraph",["text","Um erro de "],["italic",["text","race condition"]],["text"," acontece quando o resultado de um processamento se torna dependente da ordem em que eventos alheios a ele acontecem. O caso mais comum é quando temos duas ou mais threads acessando um valor compartilhado, geralmente um valor global, e ambas modificam seu valor simultaneamente."],["br"]],["paragraph",["text","Vamos imaginar uma situação dessas fora do computador."],["br"]],["paragraph",["text","Gustavo e Mariana trabalham numa linha de produção de uma fábrica de produtos eletrônicos. Cada produto que passa por eles deve receber um número de série, escrito a mão. O último número utilizado fica escrito em um quadro negro a vista de ambos."],["br"]],["paragraph",["text","Então temos os dois funcionários, a esteira trazendo os produtos, os produtos e um quadro com um número. Imagine a cena e vamos continuar."],["br"]],["paragraph",["text","No quadro temos o número zero, já que ainda não passamos nenhum produto pela linha."],["br"]],["paragraph",["text","Gustavo olha o quadro, vê o número zero e pensa: "],["italic",["text","então esse aqui vai ser o número um"]],["text",". Ele pega o produto, escreve um número um na caixa e o coloca de volta na esteira. Vai até o quadro, apaga o número zero e escreve o número um lá."],["br"]],["paragraph",["text","Mariana, por sua vez, olha o quadro e vê o número um. Pega o produto seguinte e pensa: "],["italic",["text","Ok, esse aqui vai ser o número dois"]],["text",". Ela escreve o número dois na caixa e o coloca de volta na esteira. Em seguida vai até o quadro, apaga o número um que estava lá e escreve o número dois."],["br"]],["paragraph",["text","Tirando o fato dessa nossa fábrica ter um processo um tanto estranho de controle de produção, tudo está funcionando perfeitamente bem."],["br"]],["paragraph",["text","Então a encarregada da linha, que vamos chamar de Eduarda, resolve acelerar as coisas. "],["italic",["text","Puxa vida, temos  dois funcionários na linha e apenas um trabalhando de cada vez."]],["text"," Ela leu num livro de Clojure que o trabalho concorrente pode ser usado para aproveitar melhor os recursos e, até mesmo, fazer com que o a tarefa seja executada mais depressa."],["br"]],["paragraph",["text","Então a Eduarda vai lá no controle da esteira e a acelera, para que Gustavo e Mariana possam trabalhar ao mesmo tempo, e não alternadamente."],["br"]],["paragraph",["text","Uma pausa para observarmos a expressão da Eduarda nesse momento."],["br"]],["img",["text","images/capitulo_09/duda_troll.jpg w=40% \"Olha a felicidade da encarregada\" label=cap09-duda"]],["paragraph",["br"]],["paragraph",["text","Agora a esteira está rápida e os nossos dois bravos funcionários estão pegando os produtos praticamente ao mesmo tempo. Gustavo olha para o quadro e vê lá o número cinco. Escreve seis na caixa e a coloca de volta na esteira. Enquanto isso, Mariana olha para o quadro "],["bold",["text","e também vê o número cinco"]],["text",". Ela escreve o número seis na caixa e a coloca de volta na esteira. Enquanto isso, Gustavo apaga o número cinco do quadro e escreve um número seis. Mariana vai até o quadro, apaga o número que estiver lá e também escreve o número seis."],["br"]],["paragraph",["text","Vamos deixar as coisas um pouco piores."],["br"]],["paragraph",["text","Mariana volta para sua posição, olha para o quadro e vê lá o número seis. Gustavo em sua posição também vê "],["bold",["text","o número seis"]],["text"," e pega uma caixa da esteira."],["br"]],["paragraph",["text","Mariana está se sentindo bem, feliz, produtiva e está trabalhando bem depressa. Ela pega uma caixa, escreve o número sete, vai até o quadro e o atualiza. Volta para sua posição, olha para o quadro, pega outra caixa e escreve o número oito nela. Vai até o quadro e o atualiza. Agora temos um oito escrito no quadro."],["br"]],["paragraph",["text","Nesse mesmo tempo, Gustavo, que está trabalhando em um ritmo normal, estava pegando a caixa na esteira e escreve o número sete nela. Lembre-se que o último número que ele viu no quadro foi o seis."],["br"]],["paragraph",["text","Então ele devolve a caixa para a esteira, vai até o quadro, apaga o número oito e atualiza com o número sete. Sim, a regra era escrever no quadro o último número que foi utilizado."],["br"]],["paragraph",["text","Ao invés de incrementar o número, nossos esforçados funcionários fizeram a contagem andar para trás."],["br"]],["paragraph",["text","Não há nada tão ruim que não possa ser tornado pior."],["br"]],["paragraph",["text","Essas tragédias que vocês presenciaram, tanto a do número repetido quanto a do número sendo reduzido ao invés de incrementado são exemplos de "],["italic",["text","race condition"]],["text","."],["br"]],["paragraph",["text","Vamos deixar nossos amigos com suas caixas por alguns instantes e vamos reproduzir esse problema usando código. Afinal de contas, você não comprou o livro para ler sobre pessos escrevendo em caixas, certo?"],["br"]],["paragraph",["text","Vamos criar um um valor, um objeto, que será compartilhado por várias threads."],["br"]],["paragraph",["text","Vamos escrever o código em Java, mas o problema ocorre em praticamente qualquer linguagem que você utilize. Em Java o nosso objeto é, por padrão, mutável e não vai esconder nenhuma abstração que possa receber a culpa injustamente."],["br"]],["paragraph",["text","O código completo deste exemplo pode ser encontrado no diretório "],["monospaced",["text","capitulo09/race-condition"]],["text","."],["br"]],["paragraph",["text","Nosso objeto recebe um valor inicial ao ser criado."],["br"]],["code","java",["br"],["code-text","package race_condition;"],["br"],["code-text","public class Sum {"],["br"],["code-text","    private int value;"],["br"],["code-text","    public Sum(int value) {"],["br"],["code-text","        this.value = value;"],["br"],["code-text","    }"],["br"]],["paragraph",["br"]],["paragraph",["text","Nosso objeto tem um método "],["monospaced",["text","add"]],["text",", que adiciona o valor inteiro recebido por parâmetro e o armazena."],["br"]],["code","java",["br"],["code-text","//"],["br"],["code-text","    public void add(int parameter) {"],["br"],["code-text","        this.value += parameter;"],["br"],["code-text","    }"],["br"]],["paragraph",["br"]],["paragraph",["text","Finalmente, nosso objeto tem um método "],["monospaced",["text","getValue"]],["text"," que nos retorna o valor que estiver armazenado."],["br"]],["code","java",["br"],["code-text","//"],["br"],["code-text","    public int getValue() {"],["br"],["code-text","        return value;"],["br"],["code-text","    }"],["br"],["code-text","}"],["br"]],["paragraph",["br"]],["paragraph",["text","Agora vamos voltar ao nosso querido Clojure para utilizar o nosso objeto mutável e global."],["br"]],["code","clojure",["br"],["code-text","(ns race-condition.core"],["br"],["code-text","  (:import (race_condition Sum))"],["br"],["code-text","  (:gen-class))"],["br"],["code-text","(def global (Sum. 0))"],["br"]],["paragraph",["br"]],["paragraph",["text","Vamos criar uma função chamada "],["monospaced",["text","race-condition"]],["text"," que vai somar um ao nosso valor global por vinte vezes."],["br"]],["code","clojure",["br"],["code-text","(defn- race-condition []"],["br"],["code-text","  (dotimes [n 20]"],["br"],["code-text","    (.add global 1)))"],["br"]],["paragraph",["br"]],["paragraph",["text","E dentro do bloco principal vamos criar cem threads que executam nossa função de forma concorrente."],["br"]],["code","clojure",["br"],["code-text","(defn -main [& args]"],["br"],["code-text","  (dotimes [n 100]"],["br"],["code-text","    (.start (Thread. race-condition)))"],["br"],["code-text","  (Thread/sleep 5000)"],["br"],["code-text","  (println \"Resultado: \" (.getValue global))"],["br"],["code-text","  (println))"],["br"]],["paragraph",["br"]],["paragraph",["text","É de se esperar que o resultado obtido seja igual a "],["monospaced",["text","2000"]],["text",", já que temos cem threads somando vinte vezes o número um."],["br"]],["paragraph",["text","Como você já devia imaginar, a realidade é bem diferente."],["br"]],["img",["text","images/capitulo_09/race_condition_1.png w=40% \"Resultado do código com race condition\" label=cap09-race-condition1"]],["paragraph",["br"]],["paragraph",["text","O resultado que tivemos foi bem diferente do esperado. Podemos ter qualquer número ali, menos o valor correto."],["br"]],["paragraph",["text","Vamos dividir nosso código em partes menores para entendermos o que acontece. Para isso, vamos utilizar apenas duas threads, que podem ser imaginadas como os funcionários Gustavo e Mariana do exemplo da fábrica."],["br"]],["paragraph",["text","Vamos relembrar o código do método "],["monospaced",["text","add"]],["text"," antes de detalharmos o que acontece."],["br"]],["code","java",["br"],["code-text","// relembrar é viver"],["br"],["code-text","    public void add(int parameter) {"],["br"],["code-text","        this.value += parameter;"],["br"],["code-text","    }"],["br"]],["paragraph",["br"]],["paragraph",["text","Agora que você não precisa mais ficar voltando a página do livro, vamos continuar. No método "],["monospaced",["text","add"]],["text",", as coisas acontecem na seguinte ordem:"],["br"]],["list",["br"],["text","* Armazeno localmente o valor de "],["monospaced",["text","this.value"]],["br"],["text","* Armazeno localmente o valor do parâmetro"],["br"],["text","* Somo os dois valores e armazeno o resultado localmente"],["br"],["text","* Copio o resultado para "],["monospaced",["text","this.value"]],["br"],["text","* Saio do método"],["br"]],["paragraph",["br"]],["paragraph",["text","Quando as duas threads mexem no valor global sequencialmente como acontecia no início do nosso exemplo, , ou quando estamos utilizando apenas uma thread, a primeira pega o valor armazenado em "],["monospaced",["text","this.value"]],["text",", vamos dizer que seja zero, soma um, muda "],["monospaced",["text","this.value"]],["text"," para um e encerra a tarefa."],["br"]],["paragraph",["text","A thread seguinte vai encontrar o número um em "],["monospaced",["text","this.value"]],["text",", adiciona um e grava o novo valor, dois, de volta em "],["monospaced",["text","this.value"]],["text","."],["br"]],["img",["text","images/capitulo_09/race_condition_2.png w=50% \"Uma thread sendo executada após a outra\" label=cap09-race-condition2"]],["paragraph",["br"]],["paragraph",["text","Quando as duas threads acessam o mesmo valor praticamente ao mesmo tempo, a primeira thread pega o valor de "],["monospaced",["text","this.value"]],["text",", que é dois, a segunda thread também pega o valor de "],["monospaced",["text","this.value"]],["text",", que ainda é dois. Ambas somam um ao valor que cada uma tem guardada, que é o dois, e ambas chegam ao mesmo resultado, que é três."],["br"]],["paragraph",["text","Exatamente o que aconteceu quando a encarregada acelerou a esteira e os dois funcionários passaram a trabalhar com o mesmo número em caixas diferentes."],["br"]],["img",["text","images/capitulo_09/race_condition_3.png w=50% \"Duas threads modificando o mesmo valor\" label=cap09-race-condition3"]],["paragraph",["br"]],["index",["text","Teste de mesa"]],["paragraph",["br"]],["box",["text","Teste de mesa"],["paragraph",["br"]],["paragraph",["text","Apenas a título de curiosidade, quando eu comecei a programar, essa técnica de usar tabelas exemplificando as ações do código e respectivas mudanças de valores era chamada de "],["italic",["text","teste de mesa"]],["text","."],["br"]]],["paragraph",["br"]],["paragraph",["text","Se você pensa que "],["italic",["text","race condition"]],["text"," é apenas a chateação de não ter o resultado esperado ao final da operação, vou te dar dois exemplos que podem ajudar a dar uma noção melhor do tamanho da encrenca."],["br"]],["paragraph",["text","Entre os anos de 1985 e 1987, um problema de "],["italic",["text","race condition"]],["text"," no software de um aparelho de raios X fabricado no Canadá causou a morte de pelo menos três pessoas por excesso de radiação. O problema só foi aparecer em produção e, ao periciarem os aparelhos, o erro não era reproduzido. Isso fez com que mais acidentes continuassem a acontecer"],["ref",["text","therac25-accident"]],["text","."],["br"]],["paragraph",["text","Em 2003, o segundo pior "],["italic",["text","blackout"]],["text"," da história até então deixou cinquenta e cinco milhões de pessoas no escuro em oito estados dos Estados Unidos e também no Canadá. Estima-se que pelo menos doze pessoas tenham morrido por conta desse apagão. Um erro de "],["italic",["text","race condition"]],["text"," impediu que os técnicos detectassem a tempo um problema na transmissão, sobrecarregando o sistema e causando o desligamento automático da energia"],["ref",["text","blackout2003"]],["text","."],["br"]],["paragraph",["text","Como fazemos para resolver o problema no nosso código?"],["br"]],["index",["text","Sincronização"]],["paragraph",["br"]],["paragraph",["text","Não existe uma solução única que resolva todos os casos de "],["italic",["text","race condition"]],["text",", mas para boa parte deles utilizamos uma técnica chamada de "],["italic",["text","sincronização de threads"]],["text","."],["br"]],["index",["text","Lock"]],["index",["text","Monitor"]],["paragraph",["br"]],["paragraph",["text","Simplificando o suficiente para que eu não fale muita besteira, a sincronização costuma ser feita usando "],["italic",["text","locks"]],["text",", algumas vezes também chamados de monitores, que são como chaves que permitem que uma thread de cada vez tenha acesso a um determinado valor."],["br"]],["paragraph",["text","Vamos usar um exemplo mal cheiroso. Imagine que você está numa festa onde só exista um banheiro. Imagina que desagradável seria se a porta não tivesse tranca?"],["br"]],["paragraph",["text","Então imagine que a porta do banheiro tem uma chave. Apenas uma. E ela fica pendurada na parede, ao lado da porta, do lado de fora."],["br"]],["paragraph",["text","Quando alguém precisa usar o banheiro, pega a chave, entra e tranca a porta por dentro. O próximo que quiser usar vai ter que esperar que a chave esteja de volta na parede."],["br"]],["paragraph",["text","Se quem está esperando vai ficar em fila ou se vai dar uma volta para depois tentar a sorte novamente, é mero detalhe de implementação. A JVM ou o sistema operacional em que seu código estiver sendo executado pode ter sido implementado de diferentes formas, mas isso não nos afeta diretamente."],["br"]],["paragraph",["text","Então um sujeito desocupa o banheiro, onde esperamos que ele tenha lavado as mãos, e coloca a chave no lugar. O próximo vem, pega a chave e o processo se repete até que todos se aliviem ou até que a festa acabe."],["br"]],["index",["text","Sessão crítica"]],["paragraph",["br"]],["paragraph",["text","A chave funciona como um mecanismo de sincronização, e cada pessoa na festa funciona como uma thread. Chamamos o banheiro de "],["italic",["text","sessão crítica"]],["text",", já que não podemos ter duas threads ao mesmo tempo utilizando aquele recurso."],["br"]],["paragraph",["text","Sim, é uma festa e com certeza em algum momento teremos duas ou mais pessoas ao mesmo tempo ali dentro, mas isso não tem a menor relevância para a explicação. Threads são comportadas e não levam outras threads para o banheiro no meio da festa."],["br"]],["index",["text","Starvation"]],["index",["text","Resources starvation"]],["index",["text","Inanição"]],["paragraph",["br"]],["paragraph",["text","E se o cidadão, ou cidadã, entrar no banheiro e não sair mais? Seja porque dormiu ou porque morreu? Aí temos um problema causado pela sincronização que, em inglês se chama "],["italic",["text","starvation"]],["text","."],["br"]],["paragraph",["italic",["text","Starvation"]],["text"," significa "],["italic",["text","inanição"]],["text",", ou morrer de fome. O problema recebe esse nome porque o bonito, ou a bonita, que esqueceu da vida lá dentro fez com que todo o resto do sistema, no nosso caso a festa, ficasse sem nenhum recurso, que é o banheiro."],["br"]],["quote",["text","\"Para cada benefício que você ganha, você recebe de bônus uma caixa cheia de problemas para gerenciar.\""],["text","  -- Eu mesmo, no começo do capítulo"]],["paragraph",["br"]],["paragraph",["text","Como resolver mais esse problema? Uma opção é estabelecer um tempo máximo de uso do recurso. Quem ultrapassar esse tempo é removido a força. Claro que você vai ter que lidar com a sujeira, mas pelo menos você garante que ninguém vai monopolizar o banheiro."],["br"]],["paragraph",["text","Essa é uma estratégia que costuma ser usada em "],["italic",["text","mainframes"]],["text"," e em bancos de dados. Se seu processo demorar demais, ele morre. Sinto muito."],["br"]],["paragraph",["text","Vamos voltar à nossa fábrica."],["br"]],["paragraph",["text","A encarregada da linha, Eduarda, leu mais um pouco o livro de Clojure e aprendeu sobre sincronização de processos. Ao invés de usar uma chave de banheiro, ela deixou apenas uma caneta para que os dois funcionários compartilhassem."],["br"]],["paragraph",["text","Agora o quadro negro tem lá o número dezoito. Gustavo pegou a caneta antes de Mariana, foi até a sua caixa e escreveu o número dezenove. Atualizou o quadro e colocou a caneta no lugar. Mariana pegou a caneta, viu lá o número dezenove, escreveu o número vinte em sua caixa, atualizou o quadro e devolvou a caneta para o lugar."],["br"]],["paragraph",["text","Se um dos dois resolver pegar a caneta e não devolver, teremos um caso de "],["italic",["text","starvation"]],["text",", ou inanição de recursos."],["br"]],["paragraph",["text","Eduarda, a encarregada, está orgulhosa de sua solução genial. Mas como isso se aplica ao código?"],["br"]],["index",["text","locking"]],["paragraph",["br"]],["paragraph",["text","Clojure tem uma macro chamada "],["monospaced",["text","locking"]],["text",", que recebe um valor ou objeto como parâmetro e também uma expressão a ser executada. Essa expressão vai usar o "],["italic",["text","lock"]],["text"," se ela estiver disponível, ou vai esperar sua vez até que ela fique livre."],["br"]],["paragraph",["text","No nosso código de exemplo, a nossa sessão crítica era a parte em que estávamos somando o valor no objeto mutável e global. Vamos então botar uma chave nesse objeto, como se ele fosse o banheiro da festa, e somente uma thread de cada vez vai poder modificar seu valor."],["br"]],["paragraph",["text","Alterando a função "],["monospaced",["text","race-condition"]],["text",", ela ficaria assim."],["br"]],["code","clojure",["br"],["code-text","(defn- race-condition []    ; 1"],["br"],["code-text","  (dotimes [n 20]           ; 2"],["br"],["code-text","    (locking global         ; 3"],["br"],["code-text","      (.add global 1))))    ; 4"],["br"]],["paragraph",["br"]],["paragraph",["text","Note que alteramos apenas a linha "],["monospaced",["text","3"]],["text",", fechando o parêntese correspondente no final do código."],["br"]],["paragraph",["text","Vamos executar nosso código modificado para ver se deu resultado."],["br"]],["img",["text","images/capitulo_09/race_condition_4.png w=40% \"Resultado do código corrigido\" label=cap09-race-condition4"]],["paragraph",["br"]],["paragraph",["text","Agora temos o valor correto, veja só que bonito."],["br"]],["index",["text","synchronized"]],["paragraph",["br"]],["paragraph",["text","Para quem tem experiência em Java, a macro "],["monospaced",["text","locking"]],["text"," funciona como a palavra chave "],["monospaced",["text","synchronized"]],["text"," ou como um "],["monospaced",["text","lock"]],["text"," do C#."],["br"]],["paragraph",["text","E para quem não conhece nenhuma das duas, como funciona?"],["br"]],["paragraph",["text","Funciona informando ao sistema operacional ou à máquina virtual que aquele objeto tem a posse do "],["italic",["text","lock"]],["text",". É como se uma pessoa pegasse a chave do banheiro."],["br"]],["paragraph",["text","Em seguida é executada alguma operação, ou uma série de operações, utilizando aquele objeto. Sim, não faz sentido travar o uso daquele objeto se você não vai usá-lo, certo?"],["br"]],["paragraph",["text","Finalmente, a pessoa libera o banheiro e a chave é devolvida ou, no nosso caso, o "],["italic",["text","lock"]],["text"," é liberado e o objeto pode ser usado por outra thread."],["br"]],["paragraph",["text","Se fôssemos escrever isso em uma linguagem imaginária, mas de fácil entendimento para o leitor, teríamos algo assim:"],["br"]],["code","javascript",["br"],["code-text","// objeto simboliza um objeto ou valor qualquer"],["br"],["code-text","travar(objeto)"],["br"],["code-text","objeto.faça_isso"],["br"],["code-text","objeto.faça_aquilo"],["br"],["code-text","liberar(objeto)"],["br"]],["paragraph",["br"]],["paragraph",["text","Descer a esse nível de detalhe mostra como "],["monospaced",["text","locking"]],["text"," é uma instrução de baixo nível, quase lidando diretamente com a JVM. Clojure oferece várias outras abstrações de nível mais alto e que permitem que você não tenha que controlar tão de perto onde um "],["italic",["text","lock"]],["text"," é retido ou liberado."],["br"]],["paragraph",["text","Uma regra de boa educação e bons modos, além de ajudar na performance geral do código, é de manter o "],["italic",["text","lock"]],["text"," ocupado pelo mínimo de tempo necessário."],["br"]],["paragraph",["text","Quando você sabe que tem gente esperando para usar o banheiro, não é educado esquecer da vida lá dentro, certo?"],["br"]],["index",["text","Deadlock"]],["paragraph",["br"]],["title",["text","Deadlock"]],["paragraph",["br"]],["paragraph",["text","Um "],["italic",["text","deadlock"]],["text"," acontece quando uma thread tenta acessar um recurso que está travado por outra thread, e essa outra thread tenta acessar um recurso que está travado pela primeira."],["br"]],["paragraph",["text","Você pode imaginar um "],["italic",["text","deadlock"]],["text"," como um engarrafamento de trânsito onde os carros ficam presos num cruzamento e não conseguem mais sair."],["br"]],["img",["text","images/capitulo_09/deadlock1.jpg w=50% \"As grandes cidades sofrem com o deadlock\" label=cap09-deadlock1"]],["paragraph",["br"]],["paragraph",["text","Vamos demonstrarmos a ocorrência de um "],["italic",["text","deadlock"]],["text"," com um código que transfere dinheiro entre contas bancárias."],["br"]],["paragraph",["text","Como "],["italic",["text","deadlock"]],["text"," é um erro traiçoeiro e difícil de reproduzir - e os outros também não são? - vamos simplificar utilizando apenas duas contas bancárias e vamos simular que cada operação demora um pouco mais do que deveria. Esse "],["italic",["text","um pouco"]],["text"," pode ser algo na casa de um centésimo de segundo. Para nós parece pouco, mas para o gerenciador de "],["italic",["text","threads"]],["text"," dá para fazer muita coisa nesse período."],["br"]],["paragraph",["text","O código completo deste exemplo pode ser encontrado no diretório "],["monospaced",["text","capitulo09/deadlock"]],["text","."],["br"]],["paragraph",["text","Vamos começar um código bem parecido com o que usamos no exemplo anterior. Vamos utilizar um objeto global, mutável e compartilhado que vai nos levar direto para um erro de "],["italic",["text","race condition"]],["text","."],["br"]],["paragraph",["italic",["text","Ué, mas iamos falar sobre deadlocks"]],["text","?"],["br"]],["paragraph",["text","Sim, apressado leitor. Mas vamos começar do começo para que você entenda a motivação do problema, a boa intenção da correção para, só então, termos uma clara demonstração de como essa boa intenção se torna mais um tijolinho na estrada para o inferno."],["br"]],["paragraph",["text","Vamos começar com nosso famigerado objeto mutável."],["br"]],["paragraph",["italic",["text","Mas deadlock só ocorre com objetos mutáveis?"]],["br"]],["paragraph",["text","Não, mas vamos chegar lá. Relaxe, abra seu editor de texto e aproveite o passeio."],["br"]],["paragraph",["text","Vamos criar uma classe chamada "],["monospaced",["text","Conta"]],["text",", que representa uma conta bancária."],["br"]],["paragraph",["text","Uma conta bancária serve, antes de mais nada, para guardar dinheiro. Vamos guardar isso então num campo chamado "],["monospaced",["text","saldo"]],["text"," e aproveitar para definir o saldo inicial da conta no construtor."],["br"]],["code","java",["br"],["code-text","package deadlock;"],["br"],["code-text","public class Conta {"],["br"],["code-text","    private double saldo;"],["br"],["code-text","    public Conta(double valor) {"],["br"],["code-text","        this.saldo = valor;"],["br"],["code-text","    }"],["br"]],["paragraph",["br"]],["paragraph",["text","Agora vamos criar dois métodos. Um chamado "],["monospaced",["text","depositar"]],["text",", que aumenta o saldo, e outro chamado "],["monospaced",["text","sacar"]],["text"," que diminui o saldo da conta. "],["br"]],["paragraph",["text","Vamos também adicionar uma pausa de um centésimo de segundo em cada operação para que os problemas de concorrência possam ocorrer mais depressa, como já foi explicado."],["br"]],["code","java",["br"],["code-text","//"],["br"],["code-text","    public void depositar(double valor) throws InterruptedException {"],["br"],["code-text","        this.saldo += valor;"],["br"],["code-text","        Thread.sleep(10);"],["br"],["code-text","    }"],["br"],["code-text","    public void sacar(double valor) throws InterruptedException {"],["br"],["code-text","        this.saldo -= valor;"],["br"],["code-text","        Thread.sleep(10);"],["br"],["code-text","    }"],["br"]],["paragraph",["br"]],["paragraph",["text","Finalmente, vamos adicionar um método chamado "],["monospaced",["text","getSaldo"]],["text"," para podermos saber qual o saldo da conta."],["br"]],["code","java",["br"],["code-text","//"],["br"],["code-text","    public double getSaldo() {"],["br"],["code-text","        return this.saldo;"],["br"],["code-text","    }"],["br"],["code-text","}"],["br"]],["paragraph",["br"]],["paragraph",["text","Com isso já temos o código necessário para controlarmos nossa conta bancária."],["br"]],["paragraph",["text","Agora vamos escrever um pouco de Clojure. Pode comemorar um pouquinho antes."],["br"]],["paragraph",["text","Começamos importando a classe Java para o nosso código e declarando duas contas, "],["monospaced",["text","conta-roberta"]],["text"," e "],["monospaced",["text","conta-helena"]],["text",", que são as contas de alguém chamada Roberta e alguém chamada Helena."],["br"]],["paragraph",["text","Elas vão se divertir fazendo transferências bancárias num ritmo alucinante uma para a outra."],["br"]],["code","clojure",["br"],["code-text","(ns deadlock.core"],["br"],["code-text","  (:import (deadlock Conta))"],["br"],["code-text","  (:gen-class))"],["br"],["code-text","(def conta-roberta (Conta. 200.0))"],["br"],["code-text","(def conta-helena (Conta. 200.0))"],["br"]],["paragraph",["br"]],["paragraph",["text","Agora criamos uma função "],["monospaced",["text","transferir"]],["text"," que transfere dinheiro de uma conta para outra. Essa parte é muito simples, bastando sacar dinheiro da conta de origem e depositando-o na conta de destino."],["br"]],["code","clojure",["br"],["code-text","(defn- transferir [de para valor]"],["br"],["code-text","  (.sacar de valor)"],["br"],["code-text","  (.depositar para valor))"],["br"]],["paragraph",["br"]],["paragraph",["text","O comportamento esperado é que a quantidade de dinheiro existe ao iniciar a execução do exemplo seja a mesma ao final do exemplo. Afinal, não estamos criando dinheiro nem sumindo com ele."],["br"]],["paragraph",["text","Na função principal vamos começar exibindo o valor inicial de cada conta."],["br"]],["code","clojure",["br"],["code-text","(defn -main [& args]"],["br"],["code-text","  (println \"Roberta comecou com\" (.getSaldo conta-roberta))"],["br"],["code-text","  (println \"Helena  comecou com\" (.getSaldo conta-helena))"],["br"]],["paragraph",["br"]],["paragraph",["text","Agora vamos transferir cem vezes o dinheiro da conta da Roberta para a conta da Helena ao mesmo tempo que transferimos dinheiro da conta da Helena para a conta da Roberta."],["br"]],["code","clojure",["br"],["code-text",";"],["br"],["code-text","  (dotimes [n 100]"],["br"],["code-text","    (.start (Thread. #(transferir conta-roberta conta-helena 50)))"],["br"],["code-text","    (.start (Thread. #(transferir conta-helena conta-roberta 50))))"],["br"]],["paragraph",["br"]],["paragraph",["text","Vamos esperar por um segundo antes de consultarmos o saldo, para que as operações tenham tempo de terminar."],["br"]],["paragraph",["text","Em seguida vamos exibir o saldo de cada uma das contas."],["br"]],["code","clojure",["br"],["code-text","  (Thread/sleep 1000)"],["br"],["code-text","  (println \"Roberta terminou com\" (.getSaldo conta-roberta))"],["br"],["code-text","  (println \"Helena  terminou com\" (.getSaldo conta-helena))"],["br"],["code-text","  (println))"],["br"]],["paragraph",["text"," "],["br"]],["paragraph",["text","O comportamento esperado é de que as contas terminem com o mesmo saldo do começo, mas claro que a vida não é tão fácil."],["br"]],["img",["text","images/capitulo_09/race_condition_5.png w=40% \"A velha amiga race condition\" label=cap09-race-condition5"]],["paragraph",["br"]],["todo",["text","deadlock"]],["paragraph",["br"]],["index",["text","Livelock"]],["paragraph",["br"]],["title",["text","Livelock"]],["paragraph",["br"]],["paragraph",["bold",["text"," TODO: Falar sobre livelock, que é um tipo específico de deadlock  "]],["br"]],["todo",["text","delay"]],["paragraph",["br"]],["paragraph",["text","Delay atrasa a execução de uma função"],["br"]],["todo",["text","future"]],["paragraph",["br"]],["paragraph",["text","Future é como uma thread mas retorna um valor. Toda função é Callable. Future é um processo em segundo plano cujo resultado não é necessário no momento em que for invocado."],["br"]],["todo",["text","promise"]],["paragraph",["br"]],["paragraph",["text","Promise é um valor que só estará disponível no futuro. Future é usado para computação e Promise é usado para valores. Podemos usar Promises também para bloquear Threads."],["br"]],["todo",["text","var"]],["paragraph",["br"]],["paragraph",["text","Var funciona como uma variável global separada por namespace. Dentro do escopo dinâmico a modificação é vista apenas na própria Thread. Não há garantias de que a informação será consistente."],["br"]],["todo",["text","coordenação e sincronicização"]],["paragraph",["br"]],["paragraph",["text","Coordenação é quando uma computação depende de outra e a consisistência entre elas deve ser mantida."],["br"]],["paragraph",["text","Sincronização é quando um processo fica aguardando a finalização de outro para que possa prosseguir."],["br"]],["code",["br"],["code-text","               | Síncrono           Assíncrono"],["br"],["code-text","---------------+-------------------------------------------"],["br"],["code-text","Não coordenado |   atom               agent"],["br"],["code-text","               |"],["br"],["code-text","Coordenado     |    ref"],["br"]],["paragraph",["br"]],["todo",["text","atom"]],["paragraph",["br"]],["paragraph",["text","Atom: não coordenado e síncrono. Costuma ser útil para contadores, totalizadores e estruturas que são modificadas por mais de um processo."],["br"]],["code","clojure",["br"],["code-text",";; comentários iniciados com dois ; são explicações minhas"],["br"],["code-text",";  comentários iniciados com um ; é mensagem impressa pelo código"],["br"],["code-text"," "],["br"],["code-text",";; um atom é uma estrutura de dados quer permite modificações atômicas"],["br"],["code-text",";; de valor de forma segura e síncrona em um ambiente multithread."],["br"],["code-text",";; aqui definimos um atom com valor inicial 0"],["br"],["code-text"," "],["br"],["code-text","(def c (atom 0))"],["br"],["code-text"," "],["br"],["code-text","(defn incx "],["br"],["code-text","  \"Função que incrementar um valor e causa efeito colateral"],["br"],["code-text","   exibindo na tela o nome da thread atual seguido de "],["br"],["code-text","   'waiting' quando acaba de entrar na função ou do valor"],["br"],["code-text","   a ser incrementado após a pausa de cinco segundos.\""],["br"],["code-text","   [val]"],["br"],["code-text","  (println (.getName (Thread/currentThread)) \"waiting\")"],["br"],["code-text","  (Thread/sleep 5000)"],["br"],["code-text","  (println (.getName (Thread/currentThread)) val)"],["br"],["code-text","  (inc val))"],["br"],["code-text"," "],["br"],["code-text","(defn start-thread "],["br"],["code-text","  \"Executa a modificação no atom c dentro de uma thread"],["br"],["code-text","   a parte, para que possamos simular várias modificações"],["br"],["code-text","   simultâneas no mesmo atom. Adicionei uma pausa de 100"],["br"],["code-text","   milissegundos apenas para não bagunçar a exibição dos"],["br"],["code-text","   dados na tela.\""],["br"],["code-text","  []"],["br"],["code-text","  (.start (Thread. (fn []"],["br"],["code-text","                     (swap! c incx)"],["br"],["code-text",";; swap! é síncrono, então se você quiser que a sua modificação cause um efeito colateral,"],["br"],["code-text",";; o lugar mais indicado é aqui, e não dentro da função incx."],["br"],["code-text","                     (println (.getName(Thread/currentThread)) \"c =\" @c))))"],["br"],["code-text","  (Thread/sleep 100)"],["br"],["code-text","  \"\")"],["br"],["code-text"," "],["br"],["code-text",";; vamos criar cinco threads que vão tentar modificar o valor do atom"],["br"],["code-text","(repeatedly 5 start-thread)"],["br"],["code-text"," "],["br"],["code-text",";; a função incx é executada simultaneamente cinco vezes."],["br"],["code-text",";; o valor tem um lock que só permite que uma thread o"],["br"],["code-text",";; modifique de cada vez."],["br"],["code-text","; Thread-334 waiting"],["br"],["code-text","; Thread-335 waiting"],["br"],["code-text","; Thread-336 waiting"],["br"],["code-text","; Thread-337 waiting"],["br"],["code-text","; Thread-338 waiting"],["br"],["code-text"," "],["br"],["code-text",";; a primeira thread a ser invocada, 334, sai da pausa e consegue o lock"],["br"],["code-text",";; do valor. o valor é modificado, o lock é liberado e todos os envolvidos"],["br"],["code-text",";; são notificados."],["br"],["code-text"," "],["br"],["code-text","; Thread-334 0"],["br"],["code-text","; Thread-334 c = 1"],["br"],["code-text"," "],["br"],["code-text",";; assim que recebe a notificação de que o lock foi liberado, swap! executa"],["br"],["code-text",";; novamente a função que foi passada como parâmetro."],["br"],["code-text","; Thread-335 0"],["br"],["code-text","; Thread-335 waiting"],["br"],["code-text","; Thread-336 0"],["br"],["code-text","; Thread-336 waiting"],["br"],["code-text","; Thread-337 0"],["br"],["code-text","; Thread-337 waiting"],["br"],["code-text","; Thread-338 0"],["br"],["code-text","; Thread-338 waiting"],["br"],["code-text"," "],["br"],["code-text",";; mas só o swap! que chegar primeiro pega o lock. todas as outras vão ter"],["br"],["code-text",";; que esperar novamente pela liberação"],["br"],["code-text","; Thread-335 1"],["br"],["code-text","; Thread-335 c = 2"],["br"],["code-text"," "],["br"],["code-text",";; e de novo"],["br"],["code-text","; Thread-336 1"],["br"],["code-text","; Thread-336 waiting"],["br"],["code-text","; Thread-337 1"],["br"],["code-text","; Thread-337 waiting"],["br"],["code-text","; Thread-338 1"],["br"],["code-text","; Thread-338 waiting"],["br"],["code-text","; Thread-336 2"],["br"],["code-text","; Thread-336 c = 3"],["br"],["code-text"," "],["br"],["code-text",";; e de novo"],["br"],["code-text","; Thread-337 2"],["br"],["code-text","; Thread-337 waiting"],["br"],["code-text","; Thread-338 2"],["br"],["code-text","; Thread-338 waiting"],["br"],["code-text","; Thread-337 3"],["br"],["code-text","; Thread-337 c = 4"],["br"],["code-text"," "],["br"],["code-text",";; e de novo"],["br"],["code-text","; Thread-338 3"],["br"],["code-text","; Thread-338 waiting"],["br"],["code-text","; Thread-338 4"],["br"],["code-text"," "],["br"],["code-text",";; até que todo mundo consiga modificar o valor e ninguem mais"],["br"],["code-text",";; fique em poder do lock"],["br"],["code-text","; Thread-338 c = 5"],["br"]],["paragraph",["br"]],["todo",["text","ref"]],["paragraph",["br"]],["todo",["text","STM"]],["paragraph",["br"]],["paragraph",["text","Ref: faz uso de STM para assegurar que as operações sejam executadas de maneira consistente, assim como num banco de dados. As operações não podem ter efeitos colaterais."],["br"]],["title",["text","agents"]],["paragraph",["br"]],["todo",["text","agents"]],["paragraph",["br"]],["paragraph",["text","Agents: são assíncronos e não coordenados. Fazem o trabalho sujo para a STM. Ao invés de utilizar efeito colateral num ref, o serviço é delevado para um agent."],["br"]],["code","clojure",["br"],["code-text",";; aqui eu crio um agent com o valor 1 e chamo de x"],["br"],["code-text","(def y (agent 1))"],["br"],["code-text"," "],["br"],["code-text",";; nossa função vai levar dez segundos a cada processamento"],["br"],["code-text","(defn triple [c]"],["br"],["code-text","  (println \"valor inicial:\" c)"],["br"],["code-text","  (Thread/sleep 10000)"],["br"],["code-text","  (println \"terminei\")"],["br"],["code-text","  (* c 3))"],["br"],["code-text"," "],["br"],["code-text",";; usamos deref ou @ para pegar o valor atual"],["br"],["code-text","@y"],["br"],["code-text","; 1"],["br"],["code-text"," "],["br"],["code-text",";; vamos executar a função uma vez. vai levar dez segundos para "],["br"],["code-text",";; terminar"],["br"],["code-text","(send y triple)"],["br"],["code-text","; valor inicial: 1"],["br"],["code-text","; #<Agent@766b9d4c: 1>"],["br"],["code-text"," "],["br"],["code-text",";; antes dos dez segundos, vamos ver o valor de y"],["br"],["code-text","@y"],["br"],["code-text","; 1"],["br"],["code-text"," "],["br"],["code-text",";; passados dez segundos"],["br"],["code-text"," "],["br"],["code-text","; terminei"],["br"],["code-text","@y"],["br"],["code-text","; 3"],["br"],["code-text"," "],["br"],["code-text",";; note que a nossa thread atual, a que contém o prompt do REPL"],["br"],["code-text",";; não travou enquanto triple executava, mesmo quando quisermos"],["br"],["code-text",";; ver o valor de y. Agents são assíncronos de verdade."],["br"],["code-text"," "],["br"],["code-text",";; agora vamos mandar rodar triple dez vezes no mesmo agent."],["br"],["code-text"," "],["br"],["code-text","(repeatedly 10 #(send y triple))"],["br"],["code-text","; valor inicial: 3"],["br"],["code-text","; (#<Agent@766b9d4c: 3> #<Agent@766b9d4c: 3> #<Agent@766b9d4c: 3>"],["br"],["code-text","; #<Agent@766b9d4c: 3> #<Agent@766b9d4c: 3> #<Agent@766b9d4c: 3>"],["br"],["code-text","; #<Agent@766b9d4c: 3> #<Agent@766b"],["br"],["code-text",";; e voltou ao prompt do REPL"],["br"],["code-text"," "],["br"],["code-text",";; dez segundos depois:"],["br"],["code-text","; terminei"],["br"],["code-text","; valor inicial: 9"],["br"],["code-text"," "],["br"],["code-text",";; mais dez segundos"],["br"],["code-text","; terminei"],["br"],["code-text","; valor inicial: 27"],["br"],["code-text"," "],["br"],["code-text",";; e assim por diante, até calcular as 10 vezes"],["br"],["code-text"," "],["br"],["code-text","@y"],["br"],["code-text","; 177147"],["br"],["code-text"," "],["br"],["code-text",";; Nisso podemos aprender algumas coisas:"],["br"],["code-text",";; - agents são verdadeiramente assíncronos. ficamos livres para "],["br"],["code-text","; continuar trabalhando enquanto o processamento ocorre."],["br"],["code-text",";; - agents enfileiram as ordens. mandamos executar dez "],["br"],["code-text","; processamentos em um agent e os dez ocorreram em ordem"],["br"],["code-text",";; - agents são muito legais"],["br"]],["paragraph",["br"]],["title",["text","Watchers"]],["paragraph",["text"," "],["br"]],["code","clojure",["br"],["code-text",";; Primeiro criamos um agent a"],["br"],["code-text","(def a (agent 1))"],["br"],["code-text"," "],["br"],["code-text",";; A função watch deve ter quatro parâmetros: uma chave única,"],["br"],["code-text",";; a referência ao próprio agent, o valor antigo e o valor novo."],["br"],["code-text","(defn a-watch [key ref old new]"],["br"],["code-text","  (println \"Watching\" key ref old new))"],["br"],["code-text"," "],["br"],["code-text",";; vamos criar uma função que dobra o valor recebido e informa"],["br"],["code-text",";; quando está sendo executada"],["br"],["code-text","(defn a-double [value]"],["br"],["code-text","  (println \"Changing\")"],["br"],["code-text","  (* value 2))"],["br"],["code-text"," "],["br"],["code-text",";; vamos associar o watch ao agent. O primeiro parâmetro é o agent,"],["br"],["code-text",";; o segundo é a chave única e o terceiro é a função watcher"],["br"],["code-text","(add-watch a :a a-watch)"],["br"],["code-text"," "],["br"],["code-text",";; e agora, ao executar send, vemos a função a-double e o watcher "],["br"],["code-text",";; sendo executados"],["br"],["code-text","(send a a-double)"],["br"],["code-text","; #<Agent@676e6c3c: 1>Changing"],["br"],["code-text","; Watching :a #<Agent@676e6c3c: 2> 1 2"],["br"],["code-text"," "],["br"],["code-text","@a"],["br"],["code-text","; 2"],["br"],["code-text"," "],["br"],["code-text",";; Você pode adicionar quantos watchers quiser, desde que a chave "],["br"],["code-text","; seja única."],["br"],["code-text","(add-watch a :b a-watch)"],["br"],["code-text"," "],["br"],["code-text","(send a a-double)"],["br"],["code-text","; Changing"],["br"],["code-text","; Watching :b #<Agent@676e6c3c: 8> 4 8"],["br"],["code-text","; Watching :a #<Agent@676e6c3c: 8> 4 8"],["br"],["code-text","; #<Agent@676e6c3c: 4>"],["br"],["code-text"," "],["br"],["code-text",";; A ordem de execução dos watchers não pode ser garantida, já que "],["br"],["code-text","; internamente"],["br"],["code-text",";; eles são armazenados em um hashmap"],["br"],["code-text"," "],["br"],["code-text",";; Para removermos um watcher, basta utilizar remove-watch"],["br"],["code-text","(remove-watch a :a)"],["br"],["code-text"," "],["br"],["code-text","(send a a-double)"],["br"],["code-text","; Changing"],["br"],["code-text","; Watching :b #<Agent@676e6c3c: 16> 8 16"],["br"],["code-text","; #<Agent@676e6c3c: 8>"],["br"],["code-text"," "],["br"],["code-text",";; Como um mero detalhe de implementação, podemos ver os watchers "],["br"],["code-text","; relacionados "],["br"],["code-text",";; àquele agent"],["br"],["code-text","(.getWatches a)"],["br"],["code-text","; {:b #<user$a_watch user$a_watch@2f16ae4f>}"],["br"]],["paragraph",["br"]],["todo",["text","volatile"]],["paragraph",["br"]],["todo",["text","Executors"]],["paragraph",["br"]],["todo",["text","ScheduledExecutorService"]],["paragraph",["br"]],["section",["text","O tipo certo para você"]],["paragraph",["br"]],["todo",["text","O tipo certo para você"]],["paragraph",["br"]],["paragraph",["text","atoms"],["br"]],["paragraph",["text","volatiles"],["br"]],["paragraph",["text","refs"],["br"]],["section",["text","Canais, core.async e goroutines"]],["paragraph",["br"]],["todo",["text","Canais, core.async e goroutines"]],["paragraph",["br"]],["paragraph",["text","Uma das grandes sacadas dos criadores do Clojure para manter a linguagem simples e enxuta foi delegar tudo o que não faz parte do núcleo da linguagem para bibliotecas especializadas."],["br"]],["paragraph",["text","Muitas dessas bibliotecas são mantidas pelas mesmas pessoas que cuidam da linguagem, e uma das mais importantes, e interessantes, é a "],["monospaced",["text","core.async"]],["text","."],["br"]],["paragraph",["text","A "],["monospaced",["text","core.async"]],["text"," permite que você estabeleça canais de comunicação entre diferentes "],["italic",["text","threads"]],["text",", de forma síncrona ou assíncrona, apresentando uma abstração simples de entender e usar. Esses canais são chamados de, adivinhe só: "],["italic",["text","channels"]],["text","."],["br"]],["paragraph",["text","Caso você não tenha utilizado Erlang ou Go, pense num "],["italic",["text","channel"]],["text"," como uma linha de comunicação entre duas ou mais "],["italic",["text","threads"]],["text"," ou processos."]]]